{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/chan/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe-ui-default.js","path":"PhotoSwipe/photoswipe-ui-default.js","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.css","path":"PhotoSwipe/photoswipe.css","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/footer.styl","path":"styles/footer.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe-ui-default.min.js","path":"PhotoSwipe/photoswipe-ui-default.min.js","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/highlight.styl","path":"styles/highlight.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/article.styl","path":"styles/article.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/monochrome.styl","path":"styles/monochrome.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.min.js","path":"PhotoSwipe/photoswipe.min.js","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/main.styl","path":"styles/main.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/mobile-header.styl","path":"styles/mobile-header.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/layout.styl","path":"styles/layout.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/pagination.styl","path":"styles/pagination.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/variables.styl","path":"styles/variables.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/third-party.styl","path":"styles/third-party.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/sidebar.styl","path":"styles/sidebar.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/post-list.styl","path":"styles/post-list.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/archive.styl","path":"styles/archive.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.js","path":"PhotoSwipe/photoswipe.js","modified":0,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/css/perfect-scrollbar.min.css","path":"perfect-scrollbar/css/perfect-scrollbar.min.css","modified":0,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/css/perfect-scrollbar.css","path":"perfect-scrollbar/css/perfect-scrollbar.css","modified":0,"renderable":1},{"_id":"themes/chan/source/images/cc/cc.png","path":"images/cc/cc.png","modified":0,"renderable":1},{"_id":"themes/chan/source/images/cc/nc.png","path":"images/cc/nc.png","modified":0,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/js/perfect-scrollbar.js","path":"perfect-scrollbar/js/perfect-scrollbar.js","modified":0,"renderable":1},{"_id":"themes/chan/source/images/cc/nd.png","path":"images/cc/nd.png","modified":0,"renderable":1},{"_id":"themes/chan/source/images/cc/sa.png","path":"images/cc/sa.png","modified":0,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/js/perfect-scrollbar.jquery.js","path":"perfect-scrollbar/js/perfect-scrollbar.jquery.js","modified":0,"renderable":1},{"_id":"themes/chan/source/images/cc/by.png","path":"images/cc/by.png","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.png","path":"PhotoSwipe/default-skin/default-skin.png","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/default-skin/preloader.gif","path":"PhotoSwipe/default-skin/preloader.gif","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.svg","path":"PhotoSwipe/default-skin/default-skin.svg","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.css","path":"PhotoSwipe/default-skin/default-skin.css","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/libs/normalize.styl","path":"styles/libs/normalize.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/js/min/perfect-scrollbar.jquery.min.js","path":"perfect-scrollbar/js/min/perfect-scrollbar.jquery.min.js","modified":0,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/js/min/perfect-scrollbar.min.js","path":"perfect-scrollbar/js/min/perfect-scrollbar.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/chan/.gitignore","hash":"00dfdd5e482155434664f9eab001cdaa91f2c98c","modified":1472888761159},{"_id":"themes/chan/LICENSE","hash":"bc977785bc6b3b93a1545bddd5ad5cc248591f5f","modified":1472888761169},{"_id":"themes/chan/README.md","hash":"f3e0bd58b2c652788c1696037d72a6bb9f0e4aa2","modified":1472888761204},{"_id":"themes/chan/_config.yml","hash":"a2cd45f08c3c9054e1ae3fce9e52069b2ec0322d","modified":1472888761212},{"_id":"themes/chan/cc.png","hash":"eb4f6de9697f43e2c59ae358c25b7a4c92a17798","modified":1472888761213},{"_id":"themes/chan/package.json","hash":"c8764ddddf27ba2851144ed363572d9714465e1f","modified":1472888761664},{"_id":"themes/chan/screenshot.png","hash":"d7de078723b6b2089949637a1ced3481e192d15a","modified":1472888761674},{"_id":"source/_posts/WNDR-4300-OpenWrt.md","hash":"8b94c892a5aaebe6c5ecf557015879faaad3903c","modified":1471785890725},{"_id":"themes/chan/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1472888761083},{"_id":"themes/chan/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1472888690670},{"_id":"themes/chan/.git/config","hash":"76037766e0945b03928ffe99433d7a16469f64a0","modified":1472888761125},{"_id":"source/_posts/build-shadowsocks-server.md","hash":"3052d3d6c635c9630332c6d5901fdb17f9e34b96","modified":1472842098125},{"_id":"themes/chan/.git/index","hash":"d4ee533c0e0f4bc04f76b8d0b27a4fce16ebc366","modified":1472888762233},{"_id":"themes/chan/.git/packed-refs","hash":"0585a31d8c04ff8cee16765efacd569734e39770","modified":1472888761065},{"_id":"themes/chan/layout/index.ejs","hash":"d1015a490c35be89f2d35c747b638d09b09d3918","modified":1472888761606},{"_id":"themes/chan/layout/archive.ejs","hash":"d1015a490c35be89f2d35c747b638d09b09d3918","modified":1472888761583},{"_id":"themes/chan/layout/category.ejs","hash":"1a7f5ef68a3b5319c6f165605d095ca4e2a5be7f","modified":1472888761604},{"_id":"themes/chan/layout/tag.ejs","hash":"4327317a454b1e025362c400be243c8e08967eb4","modified":1472888761660},{"_id":"themes/chan/languages/en.yml","hash":"d7a5002cf47fab3596e8a12267107053045bc09d","modified":1472888761218},{"_id":"themes/chan/scripts/photoswipe.js","hash":"33496124158cfec80f7a40d44cc69ff695429ba5","modified":1472888761693},{"_id":"themes/chan/languages/zh-CN.yml","hash":"62de7f845278ac679870a39e228117e218655e77","modified":1472888761222},{"_id":"themes/chan/layout/post.ejs","hash":"82e7106ff6b66c50c01a58c316cb1c1b4c78215c","modified":1472888761649},{"_id":"themes/chan/layout/layout.ejs","hash":"a2f89332a1ebd5161dddfd51fa71edfa00dc6910","modified":1472888761633},{"_id":"themes/chan/languages/zh-TW.yml","hash":"4af62d6e23d0e475e3d15aaa4cefed576ac82476","modified":1472888761229},{"_id":"themes/chan/screenshot.gif","hash":"fe433effcca8c245e7ea4c5da09521659fe15592","modified":1472888761670},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1471711162456},{"_id":"source/_posts/java-web-crawling-startup.md","hash":"f8dbc4ec49285753e269181f33840c48a68912d7","modified":1472842098201},{"_id":"source/_posts/WNDR-4300-OpenWrt/openNcpa.png","hash":"94894ab4e508a3f4cd037bab6cf1220b2f2c6b13","modified":1471713411090},{"_id":"source/_posts/WNDR-4300-OpenWrt/selectEtherNet.png","hash":"7b1152d4800aabd993c94f432594168003a7cae3","modified":1471713435890},{"_id":"source/_posts/WNDR-4300-OpenWrt/selectIPV4.png","hash":"857d6531df3c5165342c1b4f674f1dda9e8a2f44","modified":1471713444266},{"_id":"source/_posts/WNDR-4300-OpenWrt/setIPV4.png","hash":"d8977b5cc827f5ab61d8223cf9ed6ee566c9d904","modified":1471713447995},{"_id":"source/_posts/build-shadowsocks-server/charge.png","hash":"b540a09d8249a63140ee3b02301568791453fe44","modified":1471076145486},{"_id":"source/_posts/build-shadowsocks-server/editServer.png","hash":"21377d1da6f442579e7178540b445727d578866f","modified":1472842098148},{"_id":"source/_posts/WNDR-4300-OpenWrt/property.png","hash":"f4ffe56c6698c2efd72539452b6d16d766163552","modified":1471713440364},{"_id":"source/_posts/build-shadowsocks-server/selectLocation2.png","hash":"bcd96e408ebf18e3968f28d2763c2789499b2fd1","modified":1471533123479},{"_id":"source/_posts/build-shadowsocks-server/selectServer.png","hash":"d2675ac42e7b2f73779b1eb3dc426a4eec93ea54","modified":1471533073267},{"_id":"source/_posts/build-shadowsocks-server/editServer2.png","hash":"5ce6cb91bd6c62ef1cb5127466c47d4c6e81f2a9","modified":1472842098150},{"_id":"source/_posts/build-shadowsocks-server/selectServer4.png","hash":"456d976424143c2806bb6eb1c3c3a8d42131031d","modified":1471533566281},{"_id":"source/_posts/build-shadowsocks-server/usePutty2.png","hash":"4a61ff40b351f2e19a64b4134e0a53520c27d05e","modified":1472842098179},{"_id":"source/_posts/build-shadowsocks-server/usePutty3.png","hash":"a52a55eb0279d8b2f3a8193b56de467fd827fa73","modified":1472842098186},{"_id":"themes/chan/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1472888690891},{"_id":"themes/chan/.git/logs/HEAD","hash":"959593694714cf0c1e3c4b5bb39c7088922783f1","modified":1472888761099},{"_id":"themes/chan/layout/_partials/article.ejs","hash":"863d096dbac5835a42ab58e9da0b28111d645b09","modified":1472888761238},{"_id":"themes/chan/layout/_partials/footer.ejs","hash":"54dfecfc9ff00d19babba191aa528fe03b8e538a","modified":1472888761264},{"_id":"source/_posts/build-shadowsocks-server/usePutty.png","hash":"835a4fce216abe2ac363929235e0b96f7f75dd7e","modified":1472842098170},{"_id":"themes/chan/layout/_partials/baidu-statistics.ejs","hash":"233ae1839f1db1660f480acb5dc843f3f84d0c5f","modified":1472888761259},{"_id":"themes/chan/layout/_partials/mobile-header.ejs","hash":"d1522fbce6554b0f65f3b0d05e1e6c77ab2138de","modified":1472888761318},{"_id":"themes/chan/layout/_partials/pagination.ejs","hash":"fa59d2fd85608f27581d570d46f481423a717a4c","modified":1472888761330},{"_id":"themes/chan/layout/_partials/photoswipe.ejs","hash":"f51d12bf0af36ab76d3ce569df54241c191903e0","modified":1472888761350},{"_id":"themes/chan/layout/_partials/google-analytics.ejs","hash":"e7e032a8e55fe0b5815b6986029f03192f807c66","modified":1472888761282},{"_id":"themes/chan/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1472888690691},{"_id":"themes/chan/layout/_partials/head.ejs","hash":"8f8523ae6ac9ee996764eeff6050b857a7994991","modified":1472888761309},{"_id":"themes/chan/layout/_partials/scripts.ejs","hash":"1eb7538763ab779ca70bdb0a0e75933662187c78","modified":1472888761548},{"_id":"themes/chan/layout/_partials/post-list.ejs","hash":"1363ec82c28a01d95ad045a4e78ff19b7a27f116","modified":1472888761381},{"_id":"themes/chan/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1472888690754},{"_id":"themes/chan/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1472888690779},{"_id":"themes/chan/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1472888690727},{"_id":"themes/chan/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1472888690802},{"_id":"themes/chan/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1472888690853},{"_id":"themes/chan/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1472888690879},{"_id":"themes/chan/layout/_partials/sidebar.ejs","hash":"41704f0f0ffd581c5436b2f185290e6baafad504","modified":1472888761574},{"_id":"themes/chan/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1472888690714},{"_id":"themes/chan/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1472888690836},{"_id":"themes/chan/source/scripts/main.js","hash":"a8e055fd631aacc788325161a67d8a9f76e54736","modified":1472888762088},{"_id":"themes/chan/source/PhotoSwipe/photoswipe-ui-default.js","hash":"05fa305ec449deb59b04e2ae118a8e3ec5250e1b","modified":1472888761732},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.css","hash":"344a1b84e0001becfb278de3fb6decc79616599e","modified":1472888761794},{"_id":"themes/chan/source/styles/footer.styl","hash":"3b83acaf0f5f128d3826c66625584cd35527b203","modified":1472888762114},{"_id":"themes/chan/source/PhotoSwipe/photoswipe-ui-default.min.js","hash":"852a1fcdaacf66754090fc6d432013c5c657ab80","modified":1472888761788},{"_id":"themes/chan/source/styles/highlight.styl","hash":"f40a2b61533cd9c8617742c177329a175d9cbd03","modified":1472888762138},{"_id":"themes/chan/source/styles/article.styl","hash":"23bc4bab2606aa72702d658c85baf24b8338bdeb","modified":1472888762106},{"_id":"themes/chan/source/styles/monochrome.styl","hash":"893aaa52a227bdb93fbb40f699129d3320ca97e8","modified":1472888762181},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.min.js","hash":"39806b9989eaecbc3e032da8de77f69e0c9ff779","modified":1472888761923},{"_id":"themes/chan/source/styles/main.styl","hash":"09291ccc7b13df3e6ddc24955ff52779051f11d9","modified":1472888762156},{"_id":"themes/chan/source/styles/mobile-header.styl","hash":"144f6eb775dc49a64a1a89065e26b765c0474cdb","modified":1472888762164},{"_id":"themes/chan/source/styles/layout.styl","hash":"3a40ba116ecceef31f992846c69757b485bcff45","modified":1472888762144},{"_id":"themes/chan/source/styles/pagination.styl","hash":"a91fb3b04eb520a94622652ca9158f3c69c37d79","modified":1472888762187},{"_id":"themes/chan/source/styles/variables.styl","hash":"217e2e6ae4ea79588a18c94ff7bdbf1da4a0f274","modified":1472888762226},{"_id":"themes/chan/source/styles/third-party.styl","hash":"659bae8c4b91617e38a4e3fff3d814272595489c","modified":1472888762211},{"_id":"themes/chan/source/styles/sidebar.styl","hash":"5340df59d184e47ce00a7f264fe5d378b782966e","modified":1472888762200},{"_id":"source/_posts/java-web-crawling-startup/find-request.png","hash":"5e53553e8d9ce4053b67b06812e284d56a8f053e","modified":1472842098203},{"_id":"source/_posts/java-web-crawling-startup/no_param.png","hash":"835c070ed034851bd93fce01b501034770e2b304","modified":1472842098214},{"_id":"source/_posts/java-web-crawling-startup/edit_system_varaiable1.png","hash":"fbb81e7253abd63359a91168f72f8a28cce796cb","modified":1471710237399},{"_id":"source/_posts/java-web-crawling-startup/import-intellij1.png","hash":"9d57b9aef81d4e424cf2c37bb446a41b8eb2f64c","modified":1472842098205},{"_id":"source/_posts/java-web-crawling-startup/edit_system_varaiable.png","hash":"6a52dbd84174b1d7845abc6886f93d00621454f1","modified":1471710139806},{"_id":"source/_posts/java-web-crawling-startup/open_system_varaible.png","hash":"ad6eba0680af16df69299e4581aec435ee5e59ce","modified":1471705717820},{"_id":"source/_posts/java-web-crawling-startup/intellij-welcome.png","hash":"3d3e1c25bab54ad5ad7dc0acfeb7c1e523e8c8c7","modified":1472842098211},{"_id":"source/_posts/java-web-crawling-startup/run_cmd.png","hash":"5e35b7cd9d82daa69225f21ca678b4f388f50e74","modified":1471710328449},{"_id":"source/_posts/java-web-crawling-startup/regexr.png","hash":"c72d8981c7e5111407818f1ae005c51a14678220","modified":1472842098218},{"_id":"source/_posts/java-web-crawling-startup/import-intellij2.png","hash":"cb35ba7e485faa44ba9cbcbd97c6e1e55a728ca3","modified":1472842098209},{"_id":"source/_posts/java-web-crawling-startup/select-dom3.png","hash":"3050e84b2e091ad6cba0175a834dbc984fd1b45e","modified":1472842098228},{"_id":"source/_posts/java-web-crawling-startup/select-path.png","hash":"44c3dbdc8f553fcd947dda41eda97b5d110e7405","modified":1471705841454},{"_id":"source/_posts/java-web-crawling-startup/test_ant.png","hash":"28a3e4aa9d7a300a70f2c02fd9315ff22dc8bdc7","modified":1471710391163},{"_id":"source/_posts/java-web-crawling-startup/urldeocde2.png","hash":"e1f2714662d8f4a65ffbd81b554b7a1d98bead06","modified":1472842098232},{"_id":"source/_posts/java-web-crawling-startup/urldecode1.png","hash":"dd8e8cbf2221b4b8d3a4774afd6a95a53ca9b614","modified":1472842098230},{"_id":"themes/chan/source/styles/post-list.styl","hash":"ad498c67ba5d630f45b52ab104fa07bb9e38d22a","modified":1472888762193},{"_id":"source/_posts/java-web-crawling-startup/urldeocde3.png","hash":"4bd90187e6eebfa3fc039bda8a33b000083213ef","modified":1472842098234},{"_id":"source/_posts/java-web-crawling-startup/select-dom.png","hash":"92ed0a6640ec652256d19189fc61f66f8d532ed0","modified":1472842098222},{"_id":"source/_posts/java-web-crawling-startup/view.png","hash":"1f7cdd8605c191bd04eeb0efcc5b5c86338e1565","modified":1472842098240},{"_id":"themes/chan/source/styles/archive.styl","hash":"b866d4a5f87e0f90891307559f979a0dfd57ff64","modified":1472888762095},{"_id":"source/_posts/java-web-crawling-startup/system_properties.png","hash":"d20ad95a93fe0f04506dde4f8aff193cffcaa3ac","modified":1471705779600},{"_id":"source/_posts/build-shadowsocks-server/bind-credit-card.png","hash":"94965926b28b99c27abce00d806f9be77b85f75b","modified":1471075306850},{"_id":"source/_posts/build-shadowsocks-server/bind-credit-card2.png","hash":"ca9da51a25b8815167857e10e5bba34321de537a","modified":1471075956480},{"_id":"source/_posts/build-shadowsocks-server/selectServer2.png","hash":"d87dfd5332514601b707e1694349975f2c8c4223","modified":1471533247777},{"_id":"source/_posts/build-shadowsocks-server/selectLocation.png","hash":"a5acfc2e5c37306f9cc1ab75b94c520f3eeeae80","modified":1471532156568},{"_id":"source/_posts/build-shadowsocks-server/vultr2016-1.jpg","hash":"5acb059d218b1b21629da13a451ca3399a3867c6","modified":1470576864405},{"_id":"source/_posts/build-shadowsocks-server/selectServer3.png","hash":"d6f639ef6696b7b8547193b4054f0ab575d4b452","modified":1471533529945},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.js","hash":"b616337e586eaa5afcf5bb77c927bd1b09a25524","modified":1472888761826},{"_id":"source/_posts/java-web-crawling-startup/select-dom2.png","hash":"fa77e71d62c708acc4b4c3308eef21d7af393a75","modified":1472842098226},{"_id":"themes/chan/.git/refs/heads/master","hash":"0d12a41579cc87297224d73c5f0b9327cf6f1ea0","modified":1472888761091},{"_id":"themes/chan/.git/objects/pack/pack-1b2c9502b85fc35dc758477225aa2d1df14706c8.idx","hash":"683ee8016357384749a6cab1f0a952a87970486f","modified":1472888760858},{"_id":"source/_posts/java-web-crawling-startup/view-source.png","hash":"6e4100058d84684aeb37d596f502704b6b8a9601","modified":1472842098238},{"_id":"themes/chan/layout/_partials/post/date.ejs","hash":"38283df1d351074b470f9eecfd673e3281adfa4c","modified":1472888761429},{"_id":"themes/chan/layout/_partials/post/disqus.ejs","hash":"a3dbd589bbbe3ebf63d09dc8121b9ac8ee4f4b62","modified":1472888761442},{"_id":"themes/chan/layout/_partials/post/duoshuo.ejs","hash":"2e52b22d3c3a65a2b8b2f16ea65631d372cb9fa5","modified":1472888761470},{"_id":"themes/chan/layout/_partials/post/jiathis.ejs","hash":"1bb25aa6088428c9163b907354e7ee65e2e8a285","modified":1472888761518},{"_id":"themes/chan/layout/_partials/post/title.ejs","hash":"a77ae3eb6dc0ae9987d15284d44dd35817585204","modified":1472888761539},{"_id":"themes/chan/layout/_partials/post/category.ejs","hash":"7d785f990b469b98b8f851c25b3ded20b7f37c05","modified":1472888761393},{"_id":"themes/chan/layout/_partials/post/tag.ejs","hash":"e4de4beeefd8b0b91551219cf649d2680deeb72e","modified":1472888761527},{"_id":"themes/chan/layout/_partials/post/cc.ejs","hash":"04dbb435fd23ff3a1229877ecbb3fcc4465fb1bd","modified":1472888761412},{"_id":"themes/chan/source/perfect-scrollbar/css/perfect-scrollbar.min.css","hash":"ad0019d1525a6b68d8e36d9ce93956018e35bd9f","modified":1472888761955},{"_id":"themes/chan/source/perfect-scrollbar/css/perfect-scrollbar.css","hash":"53804e829a794b7780cd87c544001eb0a7be9593","modified":1472888761943},{"_id":"themes/chan/source/images/cc/cc.png","hash":"f7b3311d99cf99c94a8d4e7fdfe3708988fa20eb","modified":1472888761927},{"_id":"themes/chan/source/images/cc/nc.png","hash":"93e68e51a4416092c5b2a313da706caf68113c64","modified":1472888761929},{"_id":"themes/chan/source/perfect-scrollbar/js/perfect-scrollbar.js","hash":"2afa3d22514c3442979505b76f1b337650c97ad8","modified":1472888762065},{"_id":"themes/chan/source/images/cc/nd.png","hash":"255699dc771a311b4f3646b88f9c3089420429ca","modified":1472888761930},{"_id":"themes/chan/source/images/cc/sa.png","hash":"917c361ce9ee4b8d88c5b22c2b775eff7d25e92e","modified":1472888761932},{"_id":"themes/chan/source/perfect-scrollbar/js/perfect-scrollbar.jquery.js","hash":"beb6c76a1fbbb33888065b10213d81be3aef6b66","modified":1472888762042},{"_id":"themes/chan/source/images/cc/by.png","hash":"fefd720ccfcfbc2b7b15fa56b0ff7e347855aeef","modified":1472888761926},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1472888761703},{"_id":"themes/chan/layout/_partials/post/gallery.ejs","hash":"9e5609a6544db90f99c98855b4071c204cfc6253","modified":1472888761497},{"_id":"themes/chan/source/PhotoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1472888761711},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1472888761709},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.css","hash":"3f8f8062d24cce2158d3c02bdfc56c000f1a1f9b","modified":1472888761702},{"_id":"themes/chan/source/styles/libs/normalize.styl","hash":"f466245d5ad990c1062481c0e1f8741fb4bfa00e","modified":1472888762150},{"_id":"themes/chan/.git/logs/refs/heads/master","hash":"959593694714cf0c1e3c4b5bb39c7088922783f1","modified":1472888761095},{"_id":"themes/chan/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1472888761081},{"_id":"themes/chan/source/perfect-scrollbar/js/min/perfect-scrollbar.jquery.min.js","hash":"b5aa5a930a6f720c5a8cbad2ced27dd986e8895e","modified":1472888761986},{"_id":"themes/chan/source/perfect-scrollbar/js/min/perfect-scrollbar.min.js","hash":"d611dd04c2f934950c3909626ebd519622dd9854","modified":1472888762015},{"_id":"themes/chan/.git/logs/refs/remotes/origin/HEAD","hash":"959593694714cf0c1e3c4b5bb39c7088922783f1","modified":1472888761077},{"_id":"themes/chan/.git/objects/pack/pack-1b2c9502b85fc35dc758477225aa2d1df14706c8.pack","hash":"6c98e805dabe0052e7cc19291b943302ae9195b7","modified":1472888760902},{"_id":"public/2016/06/19/hello-world/index.html","hash":"b4e6e69aabf7bdcd4441b75d5bdde3d556c5fd0a","modified":1472894435555},{"_id":"public/archives/2016/06/index.html","hash":"27abe3972a6eedd5930c4a16e6f1ceb26d2eaed0","modified":1472894435562},{"_id":"public/archives/2016/07/index.html","hash":"2790addee80aecff5daaa27a2f3dea3beebb3bca","modified":1472894435564},{"_id":"public/2016/08/18/build-shadowsocks-server/index.html","hash":"0e63388a585b4b4ca5c6934e9648856684b2afe3","modified":1472894435565},{"_id":"public/2016/08/18/java-web-crawling-startup/index.html","hash":"c389c7c4bafcf7817eb4a62beafa553cb5004b34","modified":1472894435565},{"_id":"public/2016/07/02/WNDR-4300-OpenWrt/index.html","hash":"65ed485a0e69b79a4d96ab7f2fb77688fe579845","modified":1472894435566},{"_id":"public/archives/index.html","hash":"518bc151ed72a65b550ceca05159deaf095945ce","modified":1472894435566},{"_id":"public/archives/2016/index.html","hash":"c0688cac9f2176c173e0c7801b11b6d19a614d05","modified":1472894435566},{"_id":"public/archives/2016/08/index.html","hash":"e8b064ae1fbe2529d69781f9ffa09d93633153f6","modified":1472894435567},{"_id":"public/categories/技术/index.html","hash":"902a8d694ae70bfaceaa05c4faefa741d6a634c0","modified":1472894435566},{"_id":"public/index.html","hash":"806d0feab5aba5d3573827a1dc0db13678a01c8e","modified":1472894435567},{"_id":"public/tags/科学上网/index.html","hash":"c25dc8749990bdfc7c557cde2f882406725963a0","modified":1472894435567},{"_id":"public/tags/java/index.html","hash":"7ff1ddab3406755001748e6bb43648cc36ea912b","modified":1472894435568},{"_id":"public/tags/爬虫/index.html","hash":"bd57a359eafa8c4ad506a8b1be34113f29bf967e","modified":1472894435571},{"_id":"public/tags/文字图像识别/index.html","hash":"e8203f467ebfa725d48a37ed6cc919dbb8063613","modified":1472894435572},{"_id":"public/images/cc/cc.png","hash":"f7b3311d99cf99c94a8d4e7fdfe3708988fa20eb","modified":1472894002241},{"_id":"public/images/cc/nc.png","hash":"93e68e51a4416092c5b2a313da706caf68113c64","modified":1472894002241},{"_id":"public/images/cc/nd.png","hash":"255699dc771a311b4f3646b88f9c3089420429ca","modified":1472894002242},{"_id":"public/images/cc/sa.png","hash":"917c361ce9ee4b8d88c5b22c2b775eff7d25e92e","modified":1472894002243},{"_id":"public/images/cc/by.png","hash":"fefd720ccfcfbc2b7b15fa56b0ff7e347855aeef","modified":1472894002249},{"_id":"public/PhotoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1472894002251},{"_id":"public/PhotoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1472894002254},{"_id":"public/PhotoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1472894002255},{"_id":"public/2016/07/02/WNDR-4300-OpenWrt/openNcpa.png","hash":"94894ab4e508a3f4cd037bab6cf1220b2f2c6b13","modified":1472894002257},{"_id":"public/2016/07/02/WNDR-4300-OpenWrt/property.png","hash":"f4ffe56c6698c2efd72539452b6d16d766163552","modified":1472894002258},{"_id":"public/2016/07/02/WNDR-4300-OpenWrt/selectEtherNet.png","hash":"7b1152d4800aabd993c94f432594168003a7cae3","modified":1472894002259},{"_id":"public/2016/07/02/WNDR-4300-OpenWrt/selectIPV4.png","hash":"857d6531df3c5165342c1b4f674f1dda9e8a2f44","modified":1472894002259},{"_id":"public/2016/07/02/WNDR-4300-OpenWrt/setIPV4.png","hash":"d8977b5cc827f5ab61d8223cf9ed6ee566c9d904","modified":1472894002261},{"_id":"public/2016/08/18/build-shadowsocks-server/charge.png","hash":"b540a09d8249a63140ee3b02301568791453fe44","modified":1472894002262},{"_id":"public/2016/08/18/build-shadowsocks-server/editServer.png","hash":"21377d1da6f442579e7178540b445727d578866f","modified":1472894002263},{"_id":"public/2016/08/18/build-shadowsocks-server/editServer2.png","hash":"5ce6cb91bd6c62ef1cb5127466c47d4c6e81f2a9","modified":1472894002263},{"_id":"public/2016/08/18/build-shadowsocks-server/selectLocation2.png","hash":"bcd96e408ebf18e3968f28d2763c2789499b2fd1","modified":1472894002264},{"_id":"public/2016/08/18/build-shadowsocks-server/selectServer.png","hash":"d2675ac42e7b2f73779b1eb3dc426a4eec93ea54","modified":1472894002264},{"_id":"public/2016/08/18/build-shadowsocks-server/selectServer4.png","hash":"456d976424143c2806bb6eb1c3c3a8d42131031d","modified":1472894002264},{"_id":"public/2016/08/18/build-shadowsocks-server/usePutty.png","hash":"835a4fce216abe2ac363929235e0b96f7f75dd7e","modified":1472894002265},{"_id":"public/2016/08/18/build-shadowsocks-server/usePutty2.png","hash":"4a61ff40b351f2e19a64b4134e0a53520c27d05e","modified":1472894002265},{"_id":"public/2016/08/18/build-shadowsocks-server/usePutty3.png","hash":"a52a55eb0279d8b2f3a8193b56de467fd827fa73","modified":1472894002266},{"_id":"public/2016/08/18/java-web-crawling-startup/edit_system_varaiable.png","hash":"6a52dbd84174b1d7845abc6886f93d00621454f1","modified":1472894002266},{"_id":"public/2016/08/18/java-web-crawling-startup/edit_system_varaiable1.png","hash":"fbb81e7253abd63359a91168f72f8a28cce796cb","modified":1472894002267},{"_id":"public/2016/08/18/java-web-crawling-startup/find-request.png","hash":"5e53553e8d9ce4053b67b06812e284d56a8f053e","modified":1472894002268},{"_id":"public/2016/08/18/java-web-crawling-startup/import-intellij1.png","hash":"9d57b9aef81d4e424cf2c37bb446a41b8eb2f64c","modified":1472894002269},{"_id":"public/2016/08/18/java-web-crawling-startup/import-intellij2.png","hash":"cb35ba7e485faa44ba9cbcbd97c6e1e55a728ca3","modified":1472894002270},{"_id":"public/2016/08/18/java-web-crawling-startup/intellij-welcome.png","hash":"3d3e1c25bab54ad5ad7dc0acfeb7c1e523e8c8c7","modified":1472894002271},{"_id":"public/2016/08/18/java-web-crawling-startup/no_param.png","hash":"835c070ed034851bd93fce01b501034770e2b304","modified":1472894002272},{"_id":"public/2016/08/18/java-web-crawling-startup/open_system_varaible.png","hash":"ad6eba0680af16df69299e4581aec435ee5e59ce","modified":1472894002273},{"_id":"public/2016/08/18/java-web-crawling-startup/regexr.png","hash":"c72d8981c7e5111407818f1ae005c51a14678220","modified":1472894002273},{"_id":"public/2016/08/18/java-web-crawling-startup/run_cmd.png","hash":"5e35b7cd9d82daa69225f21ca678b4f388f50e74","modified":1472894002274},{"_id":"public/2016/08/18/java-web-crawling-startup/select-dom.png","hash":"92ed0a6640ec652256d19189fc61f66f8d532ed0","modified":1472894002274},{"_id":"public/2016/08/18/java-web-crawling-startup/select-dom3.png","hash":"3050e84b2e091ad6cba0175a834dbc984fd1b45e","modified":1472894002274},{"_id":"public/2016/08/18/java-web-crawling-startup/select-path.png","hash":"44c3dbdc8f553fcd947dda41eda97b5d110e7405","modified":1472894002275},{"_id":"public/2016/08/18/java-web-crawling-startup/system_properties.png","hash":"d20ad95a93fe0f04506dde4f8aff193cffcaa3ac","modified":1472894002275},{"_id":"public/2016/08/18/java-web-crawling-startup/test_ant.png","hash":"28a3e4aa9d7a300a70f2c02fd9315ff22dc8bdc7","modified":1472894002275},{"_id":"public/2016/08/18/java-web-crawling-startup/urldecode1.png","hash":"dd8e8cbf2221b4b8d3a4774afd6a95a53ca9b614","modified":1472894002276},{"_id":"public/2016/08/18/java-web-crawling-startup/urldeocde2.png","hash":"e1f2714662d8f4a65ffbd81b554b7a1d98bead06","modified":1472894002276},{"_id":"public/2016/08/18/java-web-crawling-startup/urldeocde3.png","hash":"4bd90187e6eebfa3fc039bda8a33b000083213ef","modified":1472894002276},{"_id":"public/2016/08/18/java-web-crawling-startup/view.png","hash":"1f7cdd8605c191bd04eeb0efcc5b5c86338e1565","modified":1472894002276},{"_id":"public/2016/08/18/build-shadowsocks-server/bind-credit-card.png","hash":"94965926b28b99c27abce00d806f9be77b85f75b","modified":1472894010745},{"_id":"public/2016/08/18/build-shadowsocks-server/bind-credit-card2.png","hash":"ca9da51a25b8815167857e10e5bba34321de537a","modified":1472894010867},{"_id":"public/2016/08/18/build-shadowsocks-server/selectLocation.png","hash":"a5acfc2e5c37306f9cc1ab75b94c520f3eeeae80","modified":1472894010867},{"_id":"public/2016/08/18/build-shadowsocks-server/selectServer2.png","hash":"d87dfd5332514601b707e1694349975f2c8c4223","modified":1472894010868},{"_id":"public/2016/08/18/build-shadowsocks-server/selectServer3.png","hash":"d6f639ef6696b7b8547193b4054f0ab575d4b452","modified":1472894010869},{"_id":"public/2016/08/18/build-shadowsocks-server/vultr2016-1.jpg","hash":"5acb059d218b1b21629da13a451ca3399a3867c6","modified":1472894010870},{"_id":"public/2016/08/18/java-web-crawling-startup/select-dom2.png","hash":"fa77e71d62c708acc4b4c3308eef21d7af393a75","modified":1472894010871},{"_id":"public/2016/08/18/java-web-crawling-startup/view-source.png","hash":"6e4100058d84684aeb37d596f502704b6b8a9601","modified":1472894010874},{"_id":"public/styles/highlight.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472894010935},{"_id":"public/scripts/main.js","hash":"7bf49377a68ad7579e25e4b11edcfadef33c6f82","modified":1472894010936},{"_id":"public/PhotoSwipe/photoswipe.css","hash":"309be6861bc1384fbc016110bb083de648505fe4","modified":1472894010937},{"_id":"public/styles/footer.css","hash":"2d2c9f437c0578e213b5e51f084df0bbb84914f9","modified":1472894010937},{"_id":"public/PhotoSwipe/photoswipe-ui-default.min.js","hash":"38557bef17c33e172bc8e1670cd302d91622dfad","modified":1472894010938},{"_id":"public/styles/article.css","hash":"20b574cc1e1359f1806d06aad2702835e059e0b2","modified":1472894010938},{"_id":"public/styles/monochrome.css","hash":"ae4f10d109c4cef388c0a830e9417a545e25b66c","modified":1472894010939},{"_id":"public/styles/mobile-header.css","hash":"ff2b5e6dc153bc815d6093654a9deb2ac2133afa","modified":1472894010939},{"_id":"public/styles/layout.css","hash":"9728fea8ee073f20644febba5ba0c148ff150d33","modified":1472894010939},{"_id":"public/styles/pagination.css","hash":"3552f98652f229a6caec8d9fc4ba48c7ae06da64","modified":1472894010940},{"_id":"public/styles/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472894010940},{"_id":"public/styles/third-party.css","hash":"3e8947eb8837416acaf18a1dc1c74279bf84a23b","modified":1472894010940},{"_id":"public/styles/sidebar.css","hash":"15baefb48b657f37089018219402775f9131375e","modified":1472894010940},{"_id":"public/styles/post-list.css","hash":"021c1389e9b9d7870f09ef31afbed9b9ba3b99f9","modified":1472894010940},{"_id":"public/styles/archive.css","hash":"6d90bd0c59586ef63dd9e9e10bfa0144c0c442fa","modified":1472894010941},{"_id":"public/perfect-scrollbar/css/perfect-scrollbar.min.css","hash":"d27d8a642a0cf0377d9abdd08858fae9a0fed6e8","modified":1472894010942},{"_id":"public/perfect-scrollbar/css/perfect-scrollbar.css","hash":"3839383a67dbff2cf1efab60cc08b70517eda4fc","modified":1472894010942},{"_id":"public/PhotoSwipe/default-skin/default-skin.css","hash":"91f44576a5f5ccff4740ff5020656bd2f00ca13c","modified":1472894010943},{"_id":"public/styles/libs/normalize.css","hash":"d688e75d0b2127cb6529c6cd16a6fb28ffdd8ff0","modified":1472894010943},{"_id":"public/PhotoSwipe/photoswipe-ui-default.js","hash":"724162c14e5722a2ce1f44cf086dcea7b6855b80","modified":1472894010943},{"_id":"public/PhotoSwipe/photoswipe.min.js","hash":"e3267f5ae23f00c1ae052d019f12787296e34afc","modified":1472894010943},{"_id":"public/styles/main.css","hash":"15cd5269f8b12354c96e74a474f469aca4966780","modified":1472894010944},{"_id":"public/PhotoSwipe/photoswipe.js","hash":"ff9e3cc58b44a61144a9e211503755b170c24e91","modified":1472894010945},{"_id":"public/perfect-scrollbar/js/perfect-scrollbar.js","hash":"18a4fd1e09cac9aa351131a38c59b4dba78be084","modified":1472894010953},{"_id":"public/perfect-scrollbar/js/perfect-scrollbar.jquery.js","hash":"6c648a786548d8ec9f4879d23095ce501e850350","modified":1472894010954},{"_id":"public/perfect-scrollbar/js/min/perfect-scrollbar.jquery.min.js","hash":"de9735bbe28f4999e3e83698720b4989f80143a0","modified":1472894010955},{"_id":"public/perfect-scrollbar/js/min/perfect-scrollbar.min.js","hash":"9e33e23e57821cb4763c0cb4fb3b6870b3de11eb","modified":1472894010956}],"Category":[{"name":"技术","_id":"cismz1zkw0003mw9j0r3y25j9"}],"Data":[],"Page":[],"Post":[{"title":"WNDR-4300-shadowsock代理路由器搭建","date":"2016-07-02T12:45:01.000Z","_content":"## 给路由器刷OpenWrt系统\n\n## 事前准备\n###  NETGEAR-WNDR-4300\n  淘宝入手，全新250左右，二手150左右，怕风险就多花钱，穷人心大不在意外观的就二手（WNDR4300的穿墙性能不是很强，家里墙多的需可能需要考虑别的方案）\n### 牙签（回形针、手机取卡器）\n  用来按路由器的重置键，以便刷系统\n### 网线，两根\n  一根用来连接猫和路由（这根建议尽量长一点，尽量能让路由放在电脑旁边），一根用来连接路由和电脑\n\n\n### A \n  用网线将PC和路由器的任意一个LAN口连接（路由器有5个口插网线，LAN口用来接上网设备，WAN口接猫，接口下面会写明那个是LAN口那个是WAN口）\n\n### B 设置PC的本地IP（局域网IP）为192.168.1.2\n#### B1 \n  按win+R(win就是键盘上ctrl隔壁的那个小旗子)\n#### B2 \n  输入Ncpa.cpl，点击确定\n{% asset_img openNcpa.png %}\n#### B3\n  找到连着路由器的网络连接（用网线的话，就找到图标带网线的那个网络连接，如下图）\n{% asset_img selectEtherNet.png %}\n#### B4 \n右键-属性\n{% asset_img property.png %}\n#### B5 \n选择IPV4-属性\n{% asset_img selectIPV4.png %}\n#### B6 \n如图配置，DNS可不填\n{% asset_img setIPV4.png %}\n#### B7 \n将路由器断电\n#### B8 \n  用牙签（或其他细长物体）摁一下路由器后面的重置键（ Restore Factory Settings，在电源键附近）\n#### B9 \n开启路由器\n#### B10\n按win+R(win就是键盘上ctrl隔壁的那个小旗子) 输入cmd\n#### B11 \n输入命令\nping 192.168.1.1\n  如果ping没有超时则证明已经成功连上路由器\n  没ping通则需要检查前面各个步骤，其中B3尤其可能出错，很可能改了无线连接而非有线连接的局域网IP\n\n### C 安装OpenWrt\n#### C1\n下载OpenWrt\n    <b><a href=\"https://downloads.openwrt.org/latest/ar71xx/nand/openwrt-15.05.1-ar71xx-nand-wndr4300-ubi-factory.img\">下载OpenWrt</a></b>\n#### C2\n  假设openwrt-15.05.1-ar71xx-nand-wndr4300-ubi-factory.img装在F盘的soft文件夹（F:\\soft）\n  按win+R(win就是键盘上ctrl隔壁的那个小旗子) 输入cmd\n{% codeblock %}\nF:\n{% endcodeblock %}\n{% codeblock %}\ncd F:\\soft\n{% endcodeblock %}\n{% asset_img cmd.png %}\n\n### D 重启\n#### D1 \n  完成上述步骤后，等两三分钟，等路由器重启，期间可以做点爱做的事情\n#### D2\n  路由器重启成功后，电源指示灯亮绿色，这个时候关电源，然后再开机，如果一切正常，开机后路由器的2.4GHz 和 5GHz的等都会亮\n\n  只要出了问题，重启都能解决\n\n### E 配置openwrt\n#### E1 下载putty\n","source":"_posts/WNDR-4300-OpenWrt.md","raw":"---\ntitle: WNDR-4300-shadowsock代理路由器搭建\ndate: 2016-07-02 20:45:01\ntags:\n- 科学上网\ncategories:\n- 技术\n---\n## 给路由器刷OpenWrt系统\n\n## 事前准备\n###  NETGEAR-WNDR-4300\n  淘宝入手，全新250左右，二手150左右，怕风险就多花钱，穷人心大不在意外观的就二手（WNDR4300的穿墙性能不是很强，家里墙多的需可能需要考虑别的方案）\n### 牙签（回形针、手机取卡器）\n  用来按路由器的重置键，以便刷系统\n### 网线，两根\n  一根用来连接猫和路由（这根建议尽量长一点，尽量能让路由放在电脑旁边），一根用来连接路由和电脑\n\n\n### A \n  用网线将PC和路由器的任意一个LAN口连接（路由器有5个口插网线，LAN口用来接上网设备，WAN口接猫，接口下面会写明那个是LAN口那个是WAN口）\n\n### B 设置PC的本地IP（局域网IP）为192.168.1.2\n#### B1 \n  按win+R(win就是键盘上ctrl隔壁的那个小旗子)\n#### B2 \n  输入Ncpa.cpl，点击确定\n{% asset_img openNcpa.png %}\n#### B3\n  找到连着路由器的网络连接（用网线的话，就找到图标带网线的那个网络连接，如下图）\n{% asset_img selectEtherNet.png %}\n#### B4 \n右键-属性\n{% asset_img property.png %}\n#### B5 \n选择IPV4-属性\n{% asset_img selectIPV4.png %}\n#### B6 \n如图配置，DNS可不填\n{% asset_img setIPV4.png %}\n#### B7 \n将路由器断电\n#### B8 \n  用牙签（或其他细长物体）摁一下路由器后面的重置键（ Restore Factory Settings，在电源键附近）\n#### B9 \n开启路由器\n#### B10\n按win+R(win就是键盘上ctrl隔壁的那个小旗子) 输入cmd\n#### B11 \n输入命令\nping 192.168.1.1\n  如果ping没有超时则证明已经成功连上路由器\n  没ping通则需要检查前面各个步骤，其中B3尤其可能出错，很可能改了无线连接而非有线连接的局域网IP\n\n### C 安装OpenWrt\n#### C1\n下载OpenWrt\n    <b><a href=\"https://downloads.openwrt.org/latest/ar71xx/nand/openwrt-15.05.1-ar71xx-nand-wndr4300-ubi-factory.img\">下载OpenWrt</a></b>\n#### C2\n  假设openwrt-15.05.1-ar71xx-nand-wndr4300-ubi-factory.img装在F盘的soft文件夹（F:\\soft）\n  按win+R(win就是键盘上ctrl隔壁的那个小旗子) 输入cmd\n{% codeblock %}\nF:\n{% endcodeblock %}\n{% codeblock %}\ncd F:\\soft\n{% endcodeblock %}\n{% asset_img cmd.png %}\n\n### D 重启\n#### D1 \n  完成上述步骤后，等两三分钟，等路由器重启，期间可以做点爱做的事情\n#### D2\n  路由器重启成功后，电源指示灯亮绿色，这个时候关电源，然后再开机，如果一切正常，开机后路由器的2.4GHz 和 5GHz的等都会亮\n\n  只要出了问题，重启都能解决\n\n### E 配置openwrt\n#### E1 下载putty\n","slug":"WNDR-4300-OpenWrt","published":1,"updated":"2016-08-21T13:24:50.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cismz1zjm0000mw9jkmxotl9b","content":"<h2 id=\"给路由器刷OpenWrt系统\"><a href=\"#给路由器刷OpenWrt系统\" class=\"headerlink\" title=\"给路由器刷OpenWrt系统\"></a>给路由器刷OpenWrt系统</h2><h2 id=\"事前准备\"><a href=\"#事前准备\" class=\"headerlink\" title=\"事前准备\"></a>事前准备</h2><h3 id=\"NETGEAR-WNDR-4300\"><a href=\"#NETGEAR-WNDR-4300\" class=\"headerlink\" title=\"NETGEAR-WNDR-4300\"></a>NETGEAR-WNDR-4300</h3><p>  淘宝入手，全新250左右，二手150左右，怕风险就多花钱，穷人心大不在意外观的就二手（WNDR4300的穿墙性能不是很强，家里墙多的需可能需要考虑别的方案）</p>\n<h3 id=\"牙签（回形针、手机取卡器）\"><a href=\"#牙签（回形针、手机取卡器）\" class=\"headerlink\" title=\"牙签（回形针、手机取卡器）\"></a>牙签（回形针、手机取卡器）</h3><p>  用来按路由器的重置键，以便刷系统</p>\n<h3 id=\"网线，两根\"><a href=\"#网线，两根\" class=\"headerlink\" title=\"网线，两根\"></a>网线，两根</h3><p>  一根用来连接猫和路由（这根建议尽量长一点，尽量能让路由放在电脑旁边），一根用来连接路由和电脑</p>\n<h3 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A\"></a>A</h3><p>  用网线将PC和路由器的任意一个LAN口连接（路由器有5个口插网线，LAN口用来接上网设备，WAN口接猫，接口下面会写明那个是LAN口那个是WAN口）</p>\n<h3 id=\"B-设置PC的本地IP（局域网IP）为192-168-1-2\"><a href=\"#B-设置PC的本地IP（局域网IP）为192-168-1-2\" class=\"headerlink\" title=\"B 设置PC的本地IP（局域网IP）为192.168.1.2\"></a>B 设置PC的本地IP（局域网IP）为192.168.1.2</h3><h4 id=\"B1\"><a href=\"#B1\" class=\"headerlink\" title=\"B1\"></a>B1</h4><p>  按win+R(win就是键盘上ctrl隔壁的那个小旗子)</p>\n<h4 id=\"B2\"><a href=\"#B2\" class=\"headerlink\" title=\"B2\"></a>B2</h4><p>  输入Ncpa.cpl，点击确定<br><img src=\"/blog/public/2016/07/02/WNDR-4300-OpenWrt/openNcpa.png\" alt=\"openNcpa.png\" title=\"\"></p>\n<h4 id=\"B3\"><a href=\"#B3\" class=\"headerlink\" title=\"B3\"></a>B3</h4><p>  找到连着路由器的网络连接（用网线的话，就找到图标带网线的那个网络连接，如下图）<br><img src=\"/blog/public/2016/07/02/WNDR-4300-OpenWrt/selectEtherNet.png\" alt=\"selectEtherNet.png\" title=\"\"></p>\n<h4 id=\"B4\"><a href=\"#B4\" class=\"headerlink\" title=\"B4\"></a>B4</h4><p>右键-属性<br><img src=\"/blog/public/2016/07/02/WNDR-4300-OpenWrt/property.png\" alt=\"property.png\" title=\"\"></p>\n<h4 id=\"B5\"><a href=\"#B5\" class=\"headerlink\" title=\"B5\"></a>B5</h4><p>选择IPV4-属性<br><img src=\"/blog/public/2016/07/02/WNDR-4300-OpenWrt/selectIPV4.png\" alt=\"selectIPV4.png\" title=\"\"></p>\n<h4 id=\"B6\"><a href=\"#B6\" class=\"headerlink\" title=\"B6\"></a>B6</h4><p>如图配置，DNS可不填<br><img src=\"/blog/public/2016/07/02/WNDR-4300-OpenWrt/setIPV4.png\" alt=\"setIPV4.png\" title=\"\"></p>\n<h4 id=\"B7\"><a href=\"#B7\" class=\"headerlink\" title=\"B7\"></a>B7</h4><p>将路由器断电</p>\n<h4 id=\"B8\"><a href=\"#B8\" class=\"headerlink\" title=\"B8\"></a>B8</h4><p>  用牙签（或其他细长物体）摁一下路由器后面的重置键（ Restore Factory Settings，在电源键附近）</p>\n<h4 id=\"B9\"><a href=\"#B9\" class=\"headerlink\" title=\"B9\"></a>B9</h4><p>开启路由器</p>\n<h4 id=\"B10\"><a href=\"#B10\" class=\"headerlink\" title=\"B10\"></a>B10</h4><p>按win+R(win就是键盘上ctrl隔壁的那个小旗子) 输入cmd</p>\n<h4 id=\"B11\"><a href=\"#B11\" class=\"headerlink\" title=\"B11\"></a>B11</h4><p>输入命令<br>ping 192.168.1.1<br>  如果ping没有超时则证明已经成功连上路由器<br>  没ping通则需要检查前面各个步骤，其中B3尤其可能出错，很可能改了无线连接而非有线连接的局域网IP</p>\n<h3 id=\"C-安装OpenWrt\"><a href=\"#C-安装OpenWrt\" class=\"headerlink\" title=\"C 安装OpenWrt\"></a>C 安装OpenWrt</h3><h4 id=\"C1\"><a href=\"#C1\" class=\"headerlink\" title=\"C1\"></a>C1</h4><p>下载OpenWrt<br>    <b><a href=\"https://downloads.openwrt.org/latest/ar71xx/nand/openwrt-15.05.1-ar71xx-nand-wndr4300-ubi-factory.img\" target=\"_blank\" rel=\"external\">下载OpenWrt</a></b></p>\n<h4 id=\"C2\"><a href=\"#C2\" class=\"headerlink\" title=\"C2\"></a>C2</h4><p>  假设openwrt-15.05.1-ar71xx-nand-wndr4300-ubi-factory.img装在F盘的soft文件夹（F:\\soft）<br>  按win+R(win就是键盘上ctrl隔壁的那个小旗子) 输入cmd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">F:</div></pre></td></tr></table></figure><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd F:\\soft</div></pre></td></tr></table></figure><br></p>\n<h3 id=\"D-重启\"><a href=\"#D-重启\" class=\"headerlink\" title=\"D 重启\"></a>D 重启</h3><h4 id=\"D1\"><a href=\"#D1\" class=\"headerlink\" title=\"D1\"></a>D1</h4><p>  完成上述步骤后，等两三分钟，等路由器重启，期间可以做点爱做的事情</p>\n<h4 id=\"D2\"><a href=\"#D2\" class=\"headerlink\" title=\"D2\"></a>D2</h4><p>  路由器重启成功后，电源指示灯亮绿色，这个时候关电源，然后再开机，如果一切正常，开机后路由器的2.4GHz 和 5GHz的等都会亮</p>\n<p>  只要出了问题，重启都能解决</p>\n<h3 id=\"E-配置openwrt\"><a href=\"#E-配置openwrt\" class=\"headerlink\" title=\"E 配置openwrt\"></a>E 配置openwrt</h3><h4 id=\"E1-下载putty\"><a href=\"#E1-下载putty\" class=\"headerlink\" title=\"E1 下载putty\"></a>E1 下载putty</h4>","excerpt":"","more":"<h2 id=\"给路由器刷OpenWrt系统\"><a href=\"#给路由器刷OpenWrt系统\" class=\"headerlink\" title=\"给路由器刷OpenWrt系统\"></a>给路由器刷OpenWrt系统</h2><h2 id=\"事前准备\"><a href=\"#事前准备\" class=\"headerlink\" title=\"事前准备\"></a>事前准备</h2><h3 id=\"NETGEAR-WNDR-4300\"><a href=\"#NETGEAR-WNDR-4300\" class=\"headerlink\" title=\"NETGEAR-WNDR-4300\"></a>NETGEAR-WNDR-4300</h3><p>  淘宝入手，全新250左右，二手150左右，怕风险就多花钱，穷人心大不在意外观的就二手（WNDR4300的穿墙性能不是很强，家里墙多的需可能需要考虑别的方案）</p>\n<h3 id=\"牙签（回形针、手机取卡器）\"><a href=\"#牙签（回形针、手机取卡器）\" class=\"headerlink\" title=\"牙签（回形针、手机取卡器）\"></a>牙签（回形针、手机取卡器）</h3><p>  用来按路由器的重置键，以便刷系统</p>\n<h3 id=\"网线，两根\"><a href=\"#网线，两根\" class=\"headerlink\" title=\"网线，两根\"></a>网线，两根</h3><p>  一根用来连接猫和路由（这根建议尽量长一点，尽量能让路由放在电脑旁边），一根用来连接路由和电脑</p>\n<h3 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A\"></a>A</h3><p>  用网线将PC和路由器的任意一个LAN口连接（路由器有5个口插网线，LAN口用来接上网设备，WAN口接猫，接口下面会写明那个是LAN口那个是WAN口）</p>\n<h3 id=\"B-设置PC的本地IP（局域网IP）为192-168-1-2\"><a href=\"#B-设置PC的本地IP（局域网IP）为192-168-1-2\" class=\"headerlink\" title=\"B 设置PC的本地IP（局域网IP）为192.168.1.2\"></a>B 设置PC的本地IP（局域网IP）为192.168.1.2</h3><h4 id=\"B1\"><a href=\"#B1\" class=\"headerlink\" title=\"B1\"></a>B1</h4><p>  按win+R(win就是键盘上ctrl隔壁的那个小旗子)</p>\n<h4 id=\"B2\"><a href=\"#B2\" class=\"headerlink\" title=\"B2\"></a>B2</h4><p>  输入Ncpa.cpl，点击确定<br><img src=\"/blog/public/2016/07/02/WNDR-4300-OpenWrt/openNcpa.png\" alt=\"openNcpa.png\" title=\"\"></p>\n<h4 id=\"B3\"><a href=\"#B3\" class=\"headerlink\" title=\"B3\"></a>B3</h4><p>  找到连着路由器的网络连接（用网线的话，就找到图标带网线的那个网络连接，如下图）<br><img src=\"/blog/public/2016/07/02/WNDR-4300-OpenWrt/selectEtherNet.png\" alt=\"selectEtherNet.png\" title=\"\"></p>\n<h4 id=\"B4\"><a href=\"#B4\" class=\"headerlink\" title=\"B4\"></a>B4</h4><p>右键-属性<br><img src=\"/blog/public/2016/07/02/WNDR-4300-OpenWrt/property.png\" alt=\"property.png\" title=\"\"></p>\n<h4 id=\"B5\"><a href=\"#B5\" class=\"headerlink\" title=\"B5\"></a>B5</h4><p>选择IPV4-属性<br><img src=\"/blog/public/2016/07/02/WNDR-4300-OpenWrt/selectIPV4.png\" alt=\"selectIPV4.png\" title=\"\"></p>\n<h4 id=\"B6\"><a href=\"#B6\" class=\"headerlink\" title=\"B6\"></a>B6</h4><p>如图配置，DNS可不填<br><img src=\"/blog/public/2016/07/02/WNDR-4300-OpenWrt/setIPV4.png\" alt=\"setIPV4.png\" title=\"\"></p>\n<h4 id=\"B7\"><a href=\"#B7\" class=\"headerlink\" title=\"B7\"></a>B7</h4><p>将路由器断电</p>\n<h4 id=\"B8\"><a href=\"#B8\" class=\"headerlink\" title=\"B8\"></a>B8</h4><p>  用牙签（或其他细长物体）摁一下路由器后面的重置键（ Restore Factory Settings，在电源键附近）</p>\n<h4 id=\"B9\"><a href=\"#B9\" class=\"headerlink\" title=\"B9\"></a>B9</h4><p>开启路由器</p>\n<h4 id=\"B10\"><a href=\"#B10\" class=\"headerlink\" title=\"B10\"></a>B10</h4><p>按win+R(win就是键盘上ctrl隔壁的那个小旗子) 输入cmd</p>\n<h4 id=\"B11\"><a href=\"#B11\" class=\"headerlink\" title=\"B11\"></a>B11</h4><p>输入命令<br>ping 192.168.1.1<br>  如果ping没有超时则证明已经成功连上路由器<br>  没ping通则需要检查前面各个步骤，其中B3尤其可能出错，很可能改了无线连接而非有线连接的局域网IP</p>\n<h3 id=\"C-安装OpenWrt\"><a href=\"#C-安装OpenWrt\" class=\"headerlink\" title=\"C 安装OpenWrt\"></a>C 安装OpenWrt</h3><h4 id=\"C1\"><a href=\"#C1\" class=\"headerlink\" title=\"C1\"></a>C1</h4><p>下载OpenWrt<br>    <b><a href=\"https://downloads.openwrt.org/latest/ar71xx/nand/openwrt-15.05.1-ar71xx-nand-wndr4300-ubi-factory.img\">下载OpenWrt</a></b></p>\n<h4 id=\"C2\"><a href=\"#C2\" class=\"headerlink\" title=\"C2\"></a>C2</h4><p>  假设openwrt-15.05.1-ar71xx-nand-wndr4300-ubi-factory.img装在F盘的soft文件夹（F:\\soft）<br>  按win+R(win就是键盘上ctrl隔壁的那个小旗子) 输入cmd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">F:</div></pre></td></tr></table></figure><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd F:\\soft</div></pre></td></tr></table></figure><br></p>\n<h3 id=\"D-重启\"><a href=\"#D-重启\" class=\"headerlink\" title=\"D 重启\"></a>D 重启</h3><h4 id=\"D1\"><a href=\"#D1\" class=\"headerlink\" title=\"D1\"></a>D1</h4><p>  完成上述步骤后，等两三分钟，等路由器重启，期间可以做点爱做的事情</p>\n<h4 id=\"D2\"><a href=\"#D2\" class=\"headerlink\" title=\"D2\"></a>D2</h4><p>  路由器重启成功后，电源指示灯亮绿色，这个时候关电源，然后再开机，如果一切正常，开机后路由器的2.4GHz 和 5GHz的等都会亮</p>\n<p>  只要出了问题，重启都能解决</p>\n<h3 id=\"E-配置openwrt\"><a href=\"#E-配置openwrt\" class=\"headerlink\" title=\"E 配置openwrt\"></a>E 配置openwrt</h3><h4 id=\"E1-下载putty\"><a href=\"#E1-下载putty\" class=\"headerlink\" title=\"E1 下载putty\"></a>E1 下载putty</h4>"},{"title":"搭建shadowsocks服务器","date":"2016-08-18T14:48:44.000Z","_content":"\n## 搭建shadowsocks服务器\n\n## 事前准备\n###  一张信用卡，支持境外支付\n  可以是visa，也可以是mastercard，信用卡的申请不在本教程的范畴内，请自行去找一家离家近的银行咨询\n\n### A 申请服务器\n  本文采用的服务器供应商是vultr\n  说说本人用vultr的理由：\n  1 有日本节点\n  2 价格不贵，而且我注册的时候有优惠，进门充10美金就能用10个月\n  3 按小时收费，如果发现速度不理想或者不符合要求，可以马上停掉这台机器换一台别的\n\n#### A1 注册账号\n    <b><a href=\"http://www.vultr.com/?ref=6949606-3B\">vultr注册地址</a></b>\n\n#### A2 绑定信用卡 \n  注册之后进入图中的界面，点add new添加信用卡\n{% asset_img bind-credit-card.png %}\n{% asset_img bind-credit-card2.png %}\n\n#### A3 充钱\nPS. 点完那个按钮钱就直接冲进去了，没有确认键……别手抖连点或者错点啊\n{% asset_img charge.png %}\n\n#### A4 挑服务器\n    <b><a href=\"https://www.vultr.com/faq/#downloadspeedtests\">获取各个机房的测试节点</a></b>\n  挨个点击下图中各个机房的下载文件，找到速度最快的，记下机房所在地区（location）\n{% asset_img selectLocation.png %}\n\n  来到这个页面↓ 点加号\n{% asset_img selectServer.png %}\n\n  选择对于你来说速度最快的地区的机房\n{% asset_img selectLocation2.png %}\n\n  操作系统选ubuntu 最新版本64位，配置根据自己的经济能力选（我是选了最便宜的）\n{% asset_img selectServer2.png %}\n{% asset_img selectServer3.png %}\n\n  最后点击最下面这个按钮，等几分钟服务器就会部署完毕\n{% asset_img selectServer4.png %}\n\n### B 连接服务器\n#### B1 下载putty\nputty是一个远程连接linux主机的工具，原理可以自行google。\n<b><a href=\"https://the.earth.li/~sgtatham/putty/latest/x86/putty.exe\">下载putty</a></b>\n\n#### B2 通过putty连接服务器\n回到vultr个人主页，选择刚刚部署的服务器\n{% asset_img editServer.png %}\n点进去后可以看到服务器ip，用户名和密码（点密码右边的眼睛可以看到密码，眼睛旁边的那两个框框是复制密码到剪切板）\n{% asset_img editServer2.png %}\n打开putty，在上面那个红框内输入你的服务器ip，中间那个红框里随便填些东西，然后保存\n{% asset_img usePutty.png %}\n双击刚才保存的配置，进入putty，输入用户名，回车\n{% asset_img usePutty2.png %}\n输入密码（输入密码的时候，密码是看不见的，连星号都没有，输错了请重新再来，复制密码之后在putty的黑框框里按右键可以直接粘贴），回车\n{% asset_img usePutty3.png %}\n\n复制这两段代码，右键，回车\n{% codeblock %}\nwget -O- http://shadowsocks.org/debian/1D27208A.gpg | sudo apt-key add -\ndeb http://shadowsocks.org/ubuntu trusty main   \nsudo vi /etc/apt/sources.list     \n{% endcodeblock %}      \nvi进入source.list\n在最底下加一行\ndeb http://shadowsocks.org/ubuntu trusty main\n\n然后继续\n{% codeblock %}                \nsudo apt-get update                                     \nsudo apt-get install shadowsocks-libev    \nsudo vi /etc/shadowsocks-libev/config.json\n{% endcodeblock %}\n\n往配置文件里填入这些东西\n{% codeblock %}    \n{\n    \"server\":\"0.0.0.0\",\n    \"server_port\":,//自己设端口10000~65535之间随便填一个\n    \"local_port\":1080,\n    \"password\":\"\",//自己设密码\n    \"timeout\":60,\n    \"method\":\"aes-256-cfb\"\n}\n{% endcodeblock %}\n按一下 : （冒号，在输入法为半角英文的情况下按住shitf然后点击L右边那个键），然后输入wq保存配置文件\n\n最后\n{% codeblock %}  \nss-server -u -c /etc/shadowsocks-libev/config.json -f /var/run/shadowsocks.pid -v   \nps ax | grep ss-server     \n{% endcodeblock %}\n\n如无意外ss服务器就部署成功了","source":"_posts/build-shadowsocks-server.md","raw":"---\ntitle: 搭建shadowsocks服务器\ndate: 2016-08-18 22:48:44\ntags:\n- 科学上网\ncategories:\n- 技术\n---\n\n## 搭建shadowsocks服务器\n\n## 事前准备\n###  一张信用卡，支持境外支付\n  可以是visa，也可以是mastercard，信用卡的申请不在本教程的范畴内，请自行去找一家离家近的银行咨询\n\n### A 申请服务器\n  本文采用的服务器供应商是vultr\n  说说本人用vultr的理由：\n  1 有日本节点\n  2 价格不贵，而且我注册的时候有优惠，进门充10美金就能用10个月\n  3 按小时收费，如果发现速度不理想或者不符合要求，可以马上停掉这台机器换一台别的\n\n#### A1 注册账号\n    <b><a href=\"http://www.vultr.com/?ref=6949606-3B\">vultr注册地址</a></b>\n\n#### A2 绑定信用卡 \n  注册之后进入图中的界面，点add new添加信用卡\n{% asset_img bind-credit-card.png %}\n{% asset_img bind-credit-card2.png %}\n\n#### A3 充钱\nPS. 点完那个按钮钱就直接冲进去了，没有确认键……别手抖连点或者错点啊\n{% asset_img charge.png %}\n\n#### A4 挑服务器\n    <b><a href=\"https://www.vultr.com/faq/#downloadspeedtests\">获取各个机房的测试节点</a></b>\n  挨个点击下图中各个机房的下载文件，找到速度最快的，记下机房所在地区（location）\n{% asset_img selectLocation.png %}\n\n  来到这个页面↓ 点加号\n{% asset_img selectServer.png %}\n\n  选择对于你来说速度最快的地区的机房\n{% asset_img selectLocation2.png %}\n\n  操作系统选ubuntu 最新版本64位，配置根据自己的经济能力选（我是选了最便宜的）\n{% asset_img selectServer2.png %}\n{% asset_img selectServer3.png %}\n\n  最后点击最下面这个按钮，等几分钟服务器就会部署完毕\n{% asset_img selectServer4.png %}\n\n### B 连接服务器\n#### B1 下载putty\nputty是一个远程连接linux主机的工具，原理可以自行google。\n<b><a href=\"https://the.earth.li/~sgtatham/putty/latest/x86/putty.exe\">下载putty</a></b>\n\n#### B2 通过putty连接服务器\n回到vultr个人主页，选择刚刚部署的服务器\n{% asset_img editServer.png %}\n点进去后可以看到服务器ip，用户名和密码（点密码右边的眼睛可以看到密码，眼睛旁边的那两个框框是复制密码到剪切板）\n{% asset_img editServer2.png %}\n打开putty，在上面那个红框内输入你的服务器ip，中间那个红框里随便填些东西，然后保存\n{% asset_img usePutty.png %}\n双击刚才保存的配置，进入putty，输入用户名，回车\n{% asset_img usePutty2.png %}\n输入密码（输入密码的时候，密码是看不见的，连星号都没有，输错了请重新再来，复制密码之后在putty的黑框框里按右键可以直接粘贴），回车\n{% asset_img usePutty3.png %}\n\n复制这两段代码，右键，回车\n{% codeblock %}\nwget -O- http://shadowsocks.org/debian/1D27208A.gpg | sudo apt-key add -\ndeb http://shadowsocks.org/ubuntu trusty main   \nsudo vi /etc/apt/sources.list     \n{% endcodeblock %}      \nvi进入source.list\n在最底下加一行\ndeb http://shadowsocks.org/ubuntu trusty main\n\n然后继续\n{% codeblock %}                \nsudo apt-get update                                     \nsudo apt-get install shadowsocks-libev    \nsudo vi /etc/shadowsocks-libev/config.json\n{% endcodeblock %}\n\n往配置文件里填入这些东西\n{% codeblock %}    \n{\n    \"server\":\"0.0.0.0\",\n    \"server_port\":,//自己设端口10000~65535之间随便填一个\n    \"local_port\":1080,\n    \"password\":\"\",//自己设密码\n    \"timeout\":60,\n    \"method\":\"aes-256-cfb\"\n}\n{% endcodeblock %}\n按一下 : （冒号，在输入法为半角英文的情况下按住shitf然后点击L右边那个键），然后输入wq保存配置文件\n\n最后\n{% codeblock %}  \nss-server -u -c /etc/shadowsocks-libev/config.json -f /var/run/shadowsocks.pid -v   \nps ax | grep ss-server     \n{% endcodeblock %}\n\n如无意外ss服务器就部署成功了","slug":"build-shadowsocks-server","published":1,"updated":"2016-09-02T18:48:18.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cismz1zka0001mw9jtv0pszj5","content":"<h2 id=\"搭建shadowsocks服务器\"><a href=\"#搭建shadowsocks服务器\" class=\"headerlink\" title=\"搭建shadowsocks服务器\"></a>搭建shadowsocks服务器</h2><h2 id=\"事前准备\"><a href=\"#事前准备\" class=\"headerlink\" title=\"事前准备\"></a>事前准备</h2><h3 id=\"一张信用卡，支持境外支付\"><a href=\"#一张信用卡，支持境外支付\" class=\"headerlink\" title=\"一张信用卡，支持境外支付\"></a>一张信用卡，支持境外支付</h3><p>  可以是visa，也可以是mastercard，信用卡的申请不在本教程的范畴内，请自行去找一家离家近的银行咨询</p>\n<h3 id=\"A-申请服务器\"><a href=\"#A-申请服务器\" class=\"headerlink\" title=\"A 申请服务器\"></a>A 申请服务器</h3><p>  本文采用的服务器供应商是vultr<br>  说说本人用vultr的理由：<br>  1 有日本节点<br>  2 价格不贵，而且我注册的时候有优惠，进门充10美金就能用10个月<br>  3 按小时收费，如果发现速度不理想或者不符合要求，可以马上停掉这台机器换一台别的</p>\n<h4 id=\"A1-注册账号\"><a href=\"#A1-注册账号\" class=\"headerlink\" title=\"A1 注册账号\"></a>A1 注册账号</h4><pre><code>&lt;b&gt;&lt;a href=&quot;http://www.vultr.com/?ref=6949606-3B&quot;&gt;vultr注册地址&lt;/a&gt;&lt;/b&gt;\n</code></pre><h4 id=\"A2-绑定信用卡\"><a href=\"#A2-绑定信用卡\" class=\"headerlink\" title=\"A2 绑定信用卡\"></a>A2 绑定信用卡</h4><p>  注册之后进入图中的界面，点add new添加信用卡<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/bind-credit-card.png\" alt=\"bind-credit-card.png\" title=\"\"><br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/bind-credit-card2.png\" alt=\"bind-credit-card2.png\" title=\"\"></p>\n<h4 id=\"A3-充钱\"><a href=\"#A3-充钱\" class=\"headerlink\" title=\"A3 充钱\"></a>A3 充钱</h4><p>PS. 点完那个按钮钱就直接冲进去了，没有确认键……别手抖连点或者错点啊<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/charge.png\" alt=\"charge.png\" title=\"\"></p>\n<h4 id=\"A4-挑服务器\"><a href=\"#A4-挑服务器\" class=\"headerlink\" title=\"A4 挑服务器\"></a>A4 挑服务器</h4><pre><code>&lt;b&gt;&lt;a href=&quot;https://www.vultr.com/faq/#downloadspeedtests&quot;&gt;获取各个机房的测试节点&lt;/a&gt;&lt;/b&gt;\n</code></pre><p>  挨个点击下图中各个机房的下载文件，找到速度最快的，记下机房所在地区（location）<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/selectLocation.png\" alt=\"selectLocation.png\" title=\"\"></p>\n<p>  来到这个页面↓ 点加号<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/selectServer.png\" alt=\"selectServer.png\" title=\"\"></p>\n<p>  选择对于你来说速度最快的地区的机房<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/selectLocation2.png\" alt=\"selectLocation2.png\" title=\"\"></p>\n<p>  操作系统选ubuntu 最新版本64位，配置根据自己的经济能力选（我是选了最便宜的）<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/selectServer2.png\" alt=\"selectServer2.png\" title=\"\"><br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/selectServer3.png\" alt=\"selectServer3.png\" title=\"\"></p>\n<p>  最后点击最下面这个按钮，等几分钟服务器就会部署完毕<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/selectServer4.png\" alt=\"selectServer4.png\" title=\"\"></p>\n<h3 id=\"B-连接服务器\"><a href=\"#B-连接服务器\" class=\"headerlink\" title=\"B 连接服务器\"></a>B 连接服务器</h3><h4 id=\"B1-下载putty\"><a href=\"#B1-下载putty\" class=\"headerlink\" title=\"B1 下载putty\"></a>B1 下载putty</h4><p>putty是一个远程连接linux主机的工具，原理可以自行google。<br><b><a href=\"https://the.earth.li/~sgtatham/putty/latest/x86/putty.exe\" target=\"_blank\" rel=\"external\">下载putty</a></b></p>\n<h4 id=\"B2-通过putty连接服务器\"><a href=\"#B2-通过putty连接服务器\" class=\"headerlink\" title=\"B2 通过putty连接服务器\"></a>B2 通过putty连接服务器</h4><p>回到vultr个人主页，选择刚刚部署的服务器<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/editServer.png\" alt=\"editServer.png\" title=\"\"><br>点进去后可以看到服务器ip，用户名和密码（点密码右边的眼睛可以看到密码，眼睛旁边的那两个框框是复制密码到剪切板）<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/editServer2.png\" alt=\"editServer2.png\" title=\"\"><br>打开putty，在上面那个红框内输入你的服务器ip，中间那个红框里随便填些东西，然后保存<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/usePutty.png\" alt=\"usePutty.png\" title=\"\"><br>双击刚才保存的配置，进入putty，输入用户名，回车<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/usePutty2.png\" alt=\"usePutty2.png\" title=\"\"><br>输入密码（输入密码的时候，密码是看不见的，连星号都没有，输错了请重新再来，复制密码之后在putty的黑框框里按右键可以直接粘贴），回车<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/usePutty3.png\" alt=\"usePutty3.png\" title=\"\"></p>\n<p>复制这两段代码，右键，回车<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -O- http://shadowsocks.org/debian/1D27208A.gpg | sudo apt-key add -</div><div class=\"line\">deb http://shadowsocks.org/ubuntu trusty main   </div><div class=\"line\">sudo vi /etc/apt/sources.list     </div></pre></td></tr></table></figure><br>vi进入source.list<br>在最底下加一行<br>deb <a href=\"http://shadowsocks.org/ubuntu\" target=\"_blank\" rel=\"external\">http://shadowsocks.org/ubuntu</a> trusty main</p>\n<p>然后继续<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">                </div><div class=\"line\">sudo apt-get update                                     </div><div class=\"line\">sudo apt-get install shadowsocks-libev    </div><div class=\"line\">sudo vi /etc/shadowsocks-libev/config.json</div></pre></td></tr></table></figure></p>\n<p>往配置文件里填入这些东西<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    </div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class=\"line\">    &quot;server_port&quot;:,//自己设端口10000~65535之间随便填一个</div><div class=\"line\">    &quot;local_port&quot;:1080,</div><div class=\"line\">    &quot;password&quot;:&quot;&quot;,//自己设密码</div><div class=\"line\">    &quot;timeout&quot;:60,</div><div class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>按一下 : （冒号，在输入法为半角英文的情况下按住shitf然后点击L右边那个键），然后输入wq保存配置文件</p>\n<p>最后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">ss-server -u -c /etc/shadowsocks-libev/config.json -f /var/run/shadowsocks.pid -v   </div><div class=\"line\">ps ax | grep ss-server     </div></pre></td></tr></table></figure></p>\n<p>如无意外ss服务器就部署成功了</p>\n","excerpt":"","more":"<h2 id=\"搭建shadowsocks服务器\"><a href=\"#搭建shadowsocks服务器\" class=\"headerlink\" title=\"搭建shadowsocks服务器\"></a>搭建shadowsocks服务器</h2><h2 id=\"事前准备\"><a href=\"#事前准备\" class=\"headerlink\" title=\"事前准备\"></a>事前准备</h2><h3 id=\"一张信用卡，支持境外支付\"><a href=\"#一张信用卡，支持境外支付\" class=\"headerlink\" title=\"一张信用卡，支持境外支付\"></a>一张信用卡，支持境外支付</h3><p>  可以是visa，也可以是mastercard，信用卡的申请不在本教程的范畴内，请自行去找一家离家近的银行咨询</p>\n<h3 id=\"A-申请服务器\"><a href=\"#A-申请服务器\" class=\"headerlink\" title=\"A 申请服务器\"></a>A 申请服务器</h3><p>  本文采用的服务器供应商是vultr<br>  说说本人用vultr的理由：<br>  1 有日本节点<br>  2 价格不贵，而且我注册的时候有优惠，进门充10美金就能用10个月<br>  3 按小时收费，如果发现速度不理想或者不符合要求，可以马上停掉这台机器换一台别的</p>\n<h4 id=\"A1-注册账号\"><a href=\"#A1-注册账号\" class=\"headerlink\" title=\"A1 注册账号\"></a>A1 注册账号</h4><pre><code>&lt;b&gt;&lt;a href=&quot;http://www.vultr.com/?ref=6949606-3B&quot;&gt;vultr注册地址&lt;/a&gt;&lt;/b&gt;\n</code></pre><h4 id=\"A2-绑定信用卡\"><a href=\"#A2-绑定信用卡\" class=\"headerlink\" title=\"A2 绑定信用卡\"></a>A2 绑定信用卡</h4><p>  注册之后进入图中的界面，点add new添加信用卡<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/bind-credit-card.png\" alt=\"bind-credit-card.png\" title=\"\"><br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/bind-credit-card2.png\" alt=\"bind-credit-card2.png\" title=\"\"></p>\n<h4 id=\"A3-充钱\"><a href=\"#A3-充钱\" class=\"headerlink\" title=\"A3 充钱\"></a>A3 充钱</h4><p>PS. 点完那个按钮钱就直接冲进去了，没有确认键……别手抖连点或者错点啊<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/charge.png\" alt=\"charge.png\" title=\"\"></p>\n<h4 id=\"A4-挑服务器\"><a href=\"#A4-挑服务器\" class=\"headerlink\" title=\"A4 挑服务器\"></a>A4 挑服务器</h4><pre><code>&lt;b&gt;&lt;a href=&quot;https://www.vultr.com/faq/#downloadspeedtests&quot;&gt;获取各个机房的测试节点&lt;/a&gt;&lt;/b&gt;\n</code></pre><p>  挨个点击下图中各个机房的下载文件，找到速度最快的，记下机房所在地区（location）<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/selectLocation.png\" alt=\"selectLocation.png\" title=\"\"></p>\n<p>  来到这个页面↓ 点加号<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/selectServer.png\" alt=\"selectServer.png\" title=\"\"></p>\n<p>  选择对于你来说速度最快的地区的机房<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/selectLocation2.png\" alt=\"selectLocation2.png\" title=\"\"></p>\n<p>  操作系统选ubuntu 最新版本64位，配置根据自己的经济能力选（我是选了最便宜的）<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/selectServer2.png\" alt=\"selectServer2.png\" title=\"\"><br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/selectServer3.png\" alt=\"selectServer3.png\" title=\"\"></p>\n<p>  最后点击最下面这个按钮，等几分钟服务器就会部署完毕<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/selectServer4.png\" alt=\"selectServer4.png\" title=\"\"></p>\n<h3 id=\"B-连接服务器\"><a href=\"#B-连接服务器\" class=\"headerlink\" title=\"B 连接服务器\"></a>B 连接服务器</h3><h4 id=\"B1-下载putty\"><a href=\"#B1-下载putty\" class=\"headerlink\" title=\"B1 下载putty\"></a>B1 下载putty</h4><p>putty是一个远程连接linux主机的工具，原理可以自行google。<br><b><a href=\"https://the.earth.li/~sgtatham/putty/latest/x86/putty.exe\">下载putty</a></b></p>\n<h4 id=\"B2-通过putty连接服务器\"><a href=\"#B2-通过putty连接服务器\" class=\"headerlink\" title=\"B2 通过putty连接服务器\"></a>B2 通过putty连接服务器</h4><p>回到vultr个人主页，选择刚刚部署的服务器<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/editServer.png\" alt=\"editServer.png\" title=\"\"><br>点进去后可以看到服务器ip，用户名和密码（点密码右边的眼睛可以看到密码，眼睛旁边的那两个框框是复制密码到剪切板）<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/editServer2.png\" alt=\"editServer2.png\" title=\"\"><br>打开putty，在上面那个红框内输入你的服务器ip，中间那个红框里随便填些东西，然后保存<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/usePutty.png\" alt=\"usePutty.png\" title=\"\"><br>双击刚才保存的配置，进入putty，输入用户名，回车<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/usePutty2.png\" alt=\"usePutty2.png\" title=\"\"><br>输入密码（输入密码的时候，密码是看不见的，连星号都没有，输错了请重新再来，复制密码之后在putty的黑框框里按右键可以直接粘贴），回车<br><img src=\"/blog/public/2016/08/18/build-shadowsocks-server/usePutty3.png\" alt=\"usePutty3.png\" title=\"\"></p>\n<p>复制这两段代码，右键，回车<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -O- http://shadowsocks.org/debian/1D27208A.gpg | sudo apt-key add -</div><div class=\"line\">deb http://shadowsocks.org/ubuntu trusty main   </div><div class=\"line\">sudo vi /etc/apt/sources.list     </div></pre></td></tr></table></figure><br>vi进入source.list<br>在最底下加一行<br>deb <a href=\"http://shadowsocks.org/ubuntu\">http://shadowsocks.org/ubuntu</a> trusty main</p>\n<p>然后继续<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">                </div><div class=\"line\">sudo apt-get update                                     </div><div class=\"line\">sudo apt-get install shadowsocks-libev    </div><div class=\"line\">sudo vi /etc/shadowsocks-libev/config.json</div></pre></td></tr></table></figure></p>\n<p>往配置文件里填入这些东西<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    </div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class=\"line\">    &quot;server_port&quot;:,//自己设端口10000~65535之间随便填一个</div><div class=\"line\">    &quot;local_port&quot;:1080,</div><div class=\"line\">    &quot;password&quot;:&quot;&quot;,//自己设密码</div><div class=\"line\">    &quot;timeout&quot;:60,</div><div class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>按一下 : （冒号，在输入法为半角英文的情况下按住shitf然后点击L右边那个键），然后输入wq保存配置文件</p>\n<p>最后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">ss-server -u -c /etc/shadowsocks-libev/config.json -f /var/run/shadowsocks.pid -v   </div><div class=\"line\">ps ax | grep ss-server     </div></pre></td></tr></table></figure></p>\n<p>如无意外ss服务器就部署成功了</p>\n"},{"title":"java 爬虫入门","date":"2016-08-18T14:26:12.000Z","_content":"\n\n\n## 前置知识\n要学习爬虫，至少需要对http协议和html代码有基本的了解。\n<b><a href=\"https://hit-alibaba.github.io/interview/basic/network/HTTP.html\">http协议</a></b>\n<b><a href=\"http://www.w3school.com.cn/html/index.asp\">html语言</a></b>\n\n## htmlunit\n### htmlunit 简介\nhtmlunit是一个模拟浏览器的工具。一般的爬虫可以通过httpClient 的get post方法实现，但是有些网站针对爬虫和攻击作了一些限制，他们会通过JS代码生成一些验证参数，如果不想花心思研究这些js代码，最方便的就是模拟浏览器直接点击渲染后的html元素,此外htmlunit也会帮你自动保存cookie。\n    <b><a href=\"http://htmlunit.sourceforge.net/\">htmlunit官网</a></b>\n    <b><a href=\"https://sourceforge.net/projects/htmlunit/files/latest/download\">htmlunit下载</a></b>\n其实不下载jar也可以，htmlunit，maven找得到。\napi文档？不需要这样的东西，intellij + maven，直接就能把文档和源码都弄下来。\nhtmlunit的核心是一个叫WebClient的东西，基本上我们可以这么理解：一个WebClient实例就是一个浏览器。这意味着如果我们在某个网站拥有多个账号，就可以通过不同的浏览器登录不同的账号，然后一个并发爬取大量信息。\n\n使用WebClient之前，可以通过WebClient.getOption()方法获取浏览器配置，并对配置进行变更，比如：\n{% codeblock %}\n// 设置请求超时时间\nwebClient.getOptions().setTimeout(60000);\n// 是否允许加载css\nwebClient.getOptions().setCssEnabled(false);\n// response不是200的时候是否抛出异常\nwebClient.getOptions().setThrowExceptionOnFailingStatusCode(false);\n// 是否允许applet应用（比如各种浏览器插件）运行\nwebClient.getOptions().setAppletEnabled(false);\n// 是否使用格林尼治时间\nwebClient.getOptions().setGeolocationEnabled(false);\n// 是否允许弹出alert框框\nwebClient.getOptions().setPopupBlockerEnabled(false);\n// 是否使用不安全的ssl连接（想不装证书访问使用https协议的网站需要把这个设为true）\nwebClient.getOptions().setUseInsecureSSL(true);\n{% endcodeblock %}\n\nWebClient可以通过两种方式请求页面：\n①\n等效于直接从浏览器地址栏输入一个url，会执行可以执行的js，此外返回的page对象会将html里面的dom元素转换成java对象，可以通过tag，标签等选择。\n{% codeblock %}\nHtmlPage page = webClient.getPage(targetURL);\n{% endcodeblock %}\n②\n只请求需要的数据，不加载js\n{% codeblock %}\nWebRequest request;\nWebResponse response = null;\ntry {\n  // 这里设定get post\n  request = new WebRequest(new URL(url), HttpMethod.GET);\n  if (additionalHeaders != null) {\n    request.setAdditionalHeaders(additionalHeaders);\n  }\n  response = webClient.loadWebResponse(request);\n} catch (IOException e) {\n  e.printStackTrace();\n}\nreturn response;\n{% endcodeblock %}\n\n\n## Jsoup\n### Jsoup 简介\nJsoup可以将纯文本的html转换成java对象，让用户可以进行诸如CSS Select之类的操作，让爬虫更加方便快捷。\n    <b><a href=\"https://jsoup.org/\">Jsoup官网</a></b>\n\n比如像这样通过css选择器选择所有class=\"search_feed\"的dom元素\n{% codeblock %}\nString searchResult = extractSearchResult(scriptStr);\nDocument searchResultDoc = Jsoup.parse(searchResult);\nElements divSearchFeed = searchResultDoc.select(\".search_feed\");\n{% endcodeblock %}\n\n<b><a href=\"http://www.w3school.com.cn/cssref/css_selectors.asp\">css选择器教学</a></b>\n\n## 正则表达式\n有些时候，爬回来的数据会是一个js文件，或者是一段CDATA数据，这个时候就需要通过正则表达式提取自己所需的信息。\n<b><a href=\"http://www.runoob.com/regexp/regexp-tutorial.html\">正则表达式教学</a></b>\n\n这里有一个很好使的正则测试网站\n<b><a href=\"http://regexr.com/\">regex测试</a></b>\n网站左边还有很多很神奇很实用的功能，各位可以自行挖掘\n{% asset_img regexr.png %}\n\n## 举个例子\n爬虫之前，我们还要分析网站，确认是要向哪个url发什么请求\n一个及格的开发者电脑里都应该备一个 <b><a href=\"https://www.google.com.tw/intl/zh-CN/chrome/browser/desktop/index.html\">chrome</a></b>\n\n我们先拿 <b><a href=\"http://s.weibo.com/weibo/\">新浪微博</a></b> 开个刀：\n打开浏览器，二话不说先按一下F12，点到network，把preserve log勾上\n{% asset_img view.png %}\n然后在搜索框随便输点什么东西，把页签切到doc里，从上往下挨个看，就找到搜索的http请求了\n{% asset_img find-request.png %}\n让我们看看参数长啥样的……握日？？没有参数？嗯？url最后那段看着有点像是被urlencode过啊？\n{% asset_img no_param.png %}\n\n> urlencode\n> 網路上的定義\n> 百分號編碼, 也稱作URL編碼, 是特定上下文的統一資源定位符 的編碼機制. 實際上也適用於統一資源標誌符的編碼。也用於為\"application/x-www-form-urlencoded\" MIME準備數據, 因為它用於通過HTTP的請求操作提交HTML表單數據。\n\nurldecode一下，确认搜索参数是直接写到请求url中\n{% asset_img urldeocde1.png %}\n{% asset_img urldeocde2.png %}\n{% asset_img urldeocde3.png %}\n\n开始分析页面\n点一下审查元素左上角这里\n{% asset_img select-dom.png %}\n点一下页面里的某一条微博\n{% asset_img select-dom2.png %}\nelement页签里就会传送到这个元素，可以分析元素结构，到时候就可以通过jsoup的css选择器从dom元素中提取自己想要的信息了\n{% asset_img select-dom3.png %}\n\n但是，先别急，现在的你看到的页面，未必是你想象的这样子的\n在微博搜索页面按一下ctrl+u，发现，页面里的html代码是放在javascript里的，而且unicode编码过，htmlunit还解析不出来\n{% asset_img view-source.png %}\n\n  于是，怎么破呢，用文字很难说清，我们用<s>身体</s>实例来体会吧\n\n<b><a href=\"https://github.com/isaacbao/java_crawling_demo\">爬虫demo</a></b>\n这个项目里src\\main\\java\\crawlWeibo  这个文件会教你如何处理这个难题\n\n\n\n另外爬虫嘛，很多时候需要登录，但是登录又有验证码，于是……\n# 外传 验证码识别\n## A tesseract ocr\n### A-1 tesseract ocr简介\n  一句话概括，tesseract ocr（下文简称为tess）是惠普研发的一个文字图像识别组件，原本是用来给识别扫描仪扫出来的图片，后来进化得越来越妖，连一些简单的扭曲验证码图片也能识别成文字了。\n比较正规的介绍请看这里↓\n<b><a href=\"https://github.com/tesseract-ocr/tesseract\">tess官网</a></b>\n\n### A-2 安装tess\n#### A-2-1 安装visual C++ 2013\n  windows版的tess需要依赖visual C++ 2013\n  <b><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=40784\">visual C++ 2013下载</a></b>\n下载完毕后双击安装\n\n### A-2-2 安装tesseract ocr\n  如无意外该步骤全程都需要翻墙\n\n###### <a href=\"https://sourceforge.net/projects/tesseract-ocr-alt/files/tesseract-ocr-setup-3.02.02.exe/download\">下载tess</a>\n  双击安装，一些步骤需要注意下\n\n## B tess4j\n  让java可以通过JNA调用tess接口，进行图像识别的工具。（不懂JNA是啥的可以问google，实在不行问百度。认不认识JNA对于阅读本文没有影响）\n###### <a href=\"http://tess4j.sourceforge.net/\">tess4j官网</a>\n\n### B-1 编译tess4j\n  网上并不容易找到预编译好又能用的tess4j，自己动手丰衣足食。（当然用maven也是可以的，但由于tess4j比较依赖本地环境，即使用maven弄下来了也可能会因为环境问题导致各种运行时错误。）\n\n#### B-1-1 安装ant\n##### B-1-1-1 下载ant\n  tess4j可以通过apache ant来进行编译\n    <b><a href=\"http://ant.apache.org/\">ant官网</a></b>\n    <b><a href=\"http://apache.claz.org//ant/binaries/apache-ant-1.9.7-bin.zip\">ant下载</a></b>\n\n##### B-1-1-2 设置环境变量\n    <b>\n      下载完毕后，假设我们把ant解压到了F盘的这个目录 ↓ \n      <br/>\n      F:\\soft\\apache-ant-1.9.7-bin\\\n    </b>\n    <b>\n      bin文件夹在这里↓ \n      <br/>\n      F:\\soft\\apache-ant-1.9.7-bin\\apache-ant-1.9.7\\bin\\\n    </b>\nwin+r(win就是左下角ctrl隔壁的小旗子)\n运行\nsysdm.cpl\n{% asset_img open_system_varaible.png %}\n{% asset_img system_properties.png %}\n{% asset_img select-path.png %}\n\n  在最后面添加一条（和其他path之间用英文的;隔开，但是末尾不要加;）\n{% codeblock %}\nF:\\soft\\apache-ant-1.9.7-bin\\apache-ant-1.9.7\\bin\n{% endcodeblock %}\n{% asset_img edit_system_varaiable1.png %}\n  （安利一下WIN10，环境变量的配置十分人性化，长这样的，羡慕吧，还不赶紧升级一起喊微软爸爸）\n{% asset_img edit_system_varaiable.png %}\n\n  最后确认一下环境变量到底加上没\nwin+r\ncmd\n{% asset_img run_cmd.png %}\n\n{% codeblock %}\nant\n{% endcodeblock %}\n  结果如图所示，就证明ant可以用了\n{% asset_img test_ant.png %}\n附录：\n    <b><a href=\"https://support.microsoft.com/en-us/kb/149648\">各种控制面板的快捷方式</a></b>\n  知道了这些，如果被人叫去修电脑，装逼效果奇佳（死屌丝码农就一修电脑的也学别人装逼，怎么装都是那副亏样，交大门口捡汽水瓶子的都比你强）\n\n#### B-1-2 编译tess4j\n##### B-1-2-1 下载tess4j\n由于tess的window傻瓜安装包只有tess3.02版本，更上面的tess3.03 3.04都需要自己编译，所以这里tess4j的源码我们也选择适应tess3.02的tess4j-2.0，想体验更高版本的新特性的高端用户可以自行编译安装tess\n    <b><a href=\"https://sourceforge.net/projects/tess4j/files/tess4j/2.0/Tess4J-2.0-src.zip/download\">tess4J 2.0源码</a></b>\n下载后，假设tess4J的源码放在了F盘这个目录\n    <b>F:/tess4j</b>\nWin+r\ncmd\n{% codeblock %}\nant\n{% endcodeblock %}\n如果出了问题，请检查自己A-2步骤有没有做对，可以重新执行一下A-2\n编译完毕后，就可以试用了\n\n{% codeblock %}\n//初始化tess实例\npublic Tesseract initialTesseractInstance() {\n  Tesseract instance = new Tesseract();\n  URL url = this.getClass().getClassLoader().getResource(\"/\");\n  String dir;\n  if (null == url) {\n    url = this.getClass().getClassLoader().getResource(\".\");\n  }\n  dir = url.getPath();\n  // String system_name = System.getProperty(\"os.name\");\n  if (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n    dir = dir.substring(1);\n  }\n  instance.setDatapath(dir + \"tessdata\");\n  return instance;\n}\n{% endcodeblock %}\n\n<b><a href=\"https://github.com/isaacbao/captcha-identify-demo\">验证码识别DEMO</a></b>\n\n总结：其实这篇外传并没有什么卵用，因为最核心的图像处理算法以及图像识别算法都没写，因为这两种都不是区区博客可以写明白的东西，有兴趣，可以自行找论文","source":"_posts/java-web-crawling-startup.md","raw":"---\ntitle: java 爬虫入门\ndate: 2016-08-18 22:26:12\ntags:\n- java\n- 爬虫\n- 文字图像识别\ncategories:\n- 技术\n---\n\n\n\n## 前置知识\n要学习爬虫，至少需要对http协议和html代码有基本的了解。\n<b><a href=\"https://hit-alibaba.github.io/interview/basic/network/HTTP.html\">http协议</a></b>\n<b><a href=\"http://www.w3school.com.cn/html/index.asp\">html语言</a></b>\n\n## htmlunit\n### htmlunit 简介\nhtmlunit是一个模拟浏览器的工具。一般的爬虫可以通过httpClient 的get post方法实现，但是有些网站针对爬虫和攻击作了一些限制，他们会通过JS代码生成一些验证参数，如果不想花心思研究这些js代码，最方便的就是模拟浏览器直接点击渲染后的html元素,此外htmlunit也会帮你自动保存cookie。\n    <b><a href=\"http://htmlunit.sourceforge.net/\">htmlunit官网</a></b>\n    <b><a href=\"https://sourceforge.net/projects/htmlunit/files/latest/download\">htmlunit下载</a></b>\n其实不下载jar也可以，htmlunit，maven找得到。\napi文档？不需要这样的东西，intellij + maven，直接就能把文档和源码都弄下来。\nhtmlunit的核心是一个叫WebClient的东西，基本上我们可以这么理解：一个WebClient实例就是一个浏览器。这意味着如果我们在某个网站拥有多个账号，就可以通过不同的浏览器登录不同的账号，然后一个并发爬取大量信息。\n\n使用WebClient之前，可以通过WebClient.getOption()方法获取浏览器配置，并对配置进行变更，比如：\n{% codeblock %}\n// 设置请求超时时间\nwebClient.getOptions().setTimeout(60000);\n// 是否允许加载css\nwebClient.getOptions().setCssEnabled(false);\n// response不是200的时候是否抛出异常\nwebClient.getOptions().setThrowExceptionOnFailingStatusCode(false);\n// 是否允许applet应用（比如各种浏览器插件）运行\nwebClient.getOptions().setAppletEnabled(false);\n// 是否使用格林尼治时间\nwebClient.getOptions().setGeolocationEnabled(false);\n// 是否允许弹出alert框框\nwebClient.getOptions().setPopupBlockerEnabled(false);\n// 是否使用不安全的ssl连接（想不装证书访问使用https协议的网站需要把这个设为true）\nwebClient.getOptions().setUseInsecureSSL(true);\n{% endcodeblock %}\n\nWebClient可以通过两种方式请求页面：\n①\n等效于直接从浏览器地址栏输入一个url，会执行可以执行的js，此外返回的page对象会将html里面的dom元素转换成java对象，可以通过tag，标签等选择。\n{% codeblock %}\nHtmlPage page = webClient.getPage(targetURL);\n{% endcodeblock %}\n②\n只请求需要的数据，不加载js\n{% codeblock %}\nWebRequest request;\nWebResponse response = null;\ntry {\n  // 这里设定get post\n  request = new WebRequest(new URL(url), HttpMethod.GET);\n  if (additionalHeaders != null) {\n    request.setAdditionalHeaders(additionalHeaders);\n  }\n  response = webClient.loadWebResponse(request);\n} catch (IOException e) {\n  e.printStackTrace();\n}\nreturn response;\n{% endcodeblock %}\n\n\n## Jsoup\n### Jsoup 简介\nJsoup可以将纯文本的html转换成java对象，让用户可以进行诸如CSS Select之类的操作，让爬虫更加方便快捷。\n    <b><a href=\"https://jsoup.org/\">Jsoup官网</a></b>\n\n比如像这样通过css选择器选择所有class=\"search_feed\"的dom元素\n{% codeblock %}\nString searchResult = extractSearchResult(scriptStr);\nDocument searchResultDoc = Jsoup.parse(searchResult);\nElements divSearchFeed = searchResultDoc.select(\".search_feed\");\n{% endcodeblock %}\n\n<b><a href=\"http://www.w3school.com.cn/cssref/css_selectors.asp\">css选择器教学</a></b>\n\n## 正则表达式\n有些时候，爬回来的数据会是一个js文件，或者是一段CDATA数据，这个时候就需要通过正则表达式提取自己所需的信息。\n<b><a href=\"http://www.runoob.com/regexp/regexp-tutorial.html\">正则表达式教学</a></b>\n\n这里有一个很好使的正则测试网站\n<b><a href=\"http://regexr.com/\">regex测试</a></b>\n网站左边还有很多很神奇很实用的功能，各位可以自行挖掘\n{% asset_img regexr.png %}\n\n## 举个例子\n爬虫之前，我们还要分析网站，确认是要向哪个url发什么请求\n一个及格的开发者电脑里都应该备一个 <b><a href=\"https://www.google.com.tw/intl/zh-CN/chrome/browser/desktop/index.html\">chrome</a></b>\n\n我们先拿 <b><a href=\"http://s.weibo.com/weibo/\">新浪微博</a></b> 开个刀：\n打开浏览器，二话不说先按一下F12，点到network，把preserve log勾上\n{% asset_img view.png %}\n然后在搜索框随便输点什么东西，把页签切到doc里，从上往下挨个看，就找到搜索的http请求了\n{% asset_img find-request.png %}\n让我们看看参数长啥样的……握日？？没有参数？嗯？url最后那段看着有点像是被urlencode过啊？\n{% asset_img no_param.png %}\n\n> urlencode\n> 網路上的定義\n> 百分號編碼, 也稱作URL編碼, 是特定上下文的統一資源定位符 的編碼機制. 實際上也適用於統一資源標誌符的編碼。也用於為\"application/x-www-form-urlencoded\" MIME準備數據, 因為它用於通過HTTP的請求操作提交HTML表單數據。\n\nurldecode一下，确认搜索参数是直接写到请求url中\n{% asset_img urldeocde1.png %}\n{% asset_img urldeocde2.png %}\n{% asset_img urldeocde3.png %}\n\n开始分析页面\n点一下审查元素左上角这里\n{% asset_img select-dom.png %}\n点一下页面里的某一条微博\n{% asset_img select-dom2.png %}\nelement页签里就会传送到这个元素，可以分析元素结构，到时候就可以通过jsoup的css选择器从dom元素中提取自己想要的信息了\n{% asset_img select-dom3.png %}\n\n但是，先别急，现在的你看到的页面，未必是你想象的这样子的\n在微博搜索页面按一下ctrl+u，发现，页面里的html代码是放在javascript里的，而且unicode编码过，htmlunit还解析不出来\n{% asset_img view-source.png %}\n\n  于是，怎么破呢，用文字很难说清，我们用<s>身体</s>实例来体会吧\n\n<b><a href=\"https://github.com/isaacbao/java_crawling_demo\">爬虫demo</a></b>\n这个项目里src\\main\\java\\crawlWeibo  这个文件会教你如何处理这个难题\n\n\n\n另外爬虫嘛，很多时候需要登录，但是登录又有验证码，于是……\n# 外传 验证码识别\n## A tesseract ocr\n### A-1 tesseract ocr简介\n  一句话概括，tesseract ocr（下文简称为tess）是惠普研发的一个文字图像识别组件，原本是用来给识别扫描仪扫出来的图片，后来进化得越来越妖，连一些简单的扭曲验证码图片也能识别成文字了。\n比较正规的介绍请看这里↓\n<b><a href=\"https://github.com/tesseract-ocr/tesseract\">tess官网</a></b>\n\n### A-2 安装tess\n#### A-2-1 安装visual C++ 2013\n  windows版的tess需要依赖visual C++ 2013\n  <b><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=40784\">visual C++ 2013下载</a></b>\n下载完毕后双击安装\n\n### A-2-2 安装tesseract ocr\n  如无意外该步骤全程都需要翻墙\n\n###### <a href=\"https://sourceforge.net/projects/tesseract-ocr-alt/files/tesseract-ocr-setup-3.02.02.exe/download\">下载tess</a>\n  双击安装，一些步骤需要注意下\n\n## B tess4j\n  让java可以通过JNA调用tess接口，进行图像识别的工具。（不懂JNA是啥的可以问google，实在不行问百度。认不认识JNA对于阅读本文没有影响）\n###### <a href=\"http://tess4j.sourceforge.net/\">tess4j官网</a>\n\n### B-1 编译tess4j\n  网上并不容易找到预编译好又能用的tess4j，自己动手丰衣足食。（当然用maven也是可以的，但由于tess4j比较依赖本地环境，即使用maven弄下来了也可能会因为环境问题导致各种运行时错误。）\n\n#### B-1-1 安装ant\n##### B-1-1-1 下载ant\n  tess4j可以通过apache ant来进行编译\n    <b><a href=\"http://ant.apache.org/\">ant官网</a></b>\n    <b><a href=\"http://apache.claz.org//ant/binaries/apache-ant-1.9.7-bin.zip\">ant下载</a></b>\n\n##### B-1-1-2 设置环境变量\n    <b>\n      下载完毕后，假设我们把ant解压到了F盘的这个目录 ↓ \n      <br/>\n      F:\\soft\\apache-ant-1.9.7-bin\\\n    </b>\n    <b>\n      bin文件夹在这里↓ \n      <br/>\n      F:\\soft\\apache-ant-1.9.7-bin\\apache-ant-1.9.7\\bin\\\n    </b>\nwin+r(win就是左下角ctrl隔壁的小旗子)\n运行\nsysdm.cpl\n{% asset_img open_system_varaible.png %}\n{% asset_img system_properties.png %}\n{% asset_img select-path.png %}\n\n  在最后面添加一条（和其他path之间用英文的;隔开，但是末尾不要加;）\n{% codeblock %}\nF:\\soft\\apache-ant-1.9.7-bin\\apache-ant-1.9.7\\bin\n{% endcodeblock %}\n{% asset_img edit_system_varaiable1.png %}\n  （安利一下WIN10，环境变量的配置十分人性化，长这样的，羡慕吧，还不赶紧升级一起喊微软爸爸）\n{% asset_img edit_system_varaiable.png %}\n\n  最后确认一下环境变量到底加上没\nwin+r\ncmd\n{% asset_img run_cmd.png %}\n\n{% codeblock %}\nant\n{% endcodeblock %}\n  结果如图所示，就证明ant可以用了\n{% asset_img test_ant.png %}\n附录：\n    <b><a href=\"https://support.microsoft.com/en-us/kb/149648\">各种控制面板的快捷方式</a></b>\n  知道了这些，如果被人叫去修电脑，装逼效果奇佳（死屌丝码农就一修电脑的也学别人装逼，怎么装都是那副亏样，交大门口捡汽水瓶子的都比你强）\n\n#### B-1-2 编译tess4j\n##### B-1-2-1 下载tess4j\n由于tess的window傻瓜安装包只有tess3.02版本，更上面的tess3.03 3.04都需要自己编译，所以这里tess4j的源码我们也选择适应tess3.02的tess4j-2.0，想体验更高版本的新特性的高端用户可以自行编译安装tess\n    <b><a href=\"https://sourceforge.net/projects/tess4j/files/tess4j/2.0/Tess4J-2.0-src.zip/download\">tess4J 2.0源码</a></b>\n下载后，假设tess4J的源码放在了F盘这个目录\n    <b>F:/tess4j</b>\nWin+r\ncmd\n{% codeblock %}\nant\n{% endcodeblock %}\n如果出了问题，请检查自己A-2步骤有没有做对，可以重新执行一下A-2\n编译完毕后，就可以试用了\n\n{% codeblock %}\n//初始化tess实例\npublic Tesseract initialTesseractInstance() {\n  Tesseract instance = new Tesseract();\n  URL url = this.getClass().getClassLoader().getResource(\"/\");\n  String dir;\n  if (null == url) {\n    url = this.getClass().getClassLoader().getResource(\".\");\n  }\n  dir = url.getPath();\n  // String system_name = System.getProperty(\"os.name\");\n  if (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n    dir = dir.substring(1);\n  }\n  instance.setDatapath(dir + \"tessdata\");\n  return instance;\n}\n{% endcodeblock %}\n\n<b><a href=\"https://github.com/isaacbao/captcha-identify-demo\">验证码识别DEMO</a></b>\n\n总结：其实这篇外传并没有什么卵用，因为最核心的图像处理算法以及图像识别算法都没写，因为这两种都不是区区博客可以写明白的东西，有兴趣，可以自行找论文","slug":"java-web-crawling-startup","published":1,"updated":"2016-09-02T18:48:18.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cismz1zog000amw9j3bsifnp8","content":"<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><p>要学习爬虫，至少需要对http协议和html代码有基本的了解。<br><b><a href=\"https://hit-alibaba.github.io/interview/basic/network/HTTP.html\" target=\"_blank\" rel=\"external\">http协议</a></b><br><b><a href=\"http://www.w3school.com.cn/html/index.asp\" target=\"_blank\" rel=\"external\">html语言</a></b></p>\n<h2 id=\"htmlunit\"><a href=\"#htmlunit\" class=\"headerlink\" title=\"htmlunit\"></a>htmlunit</h2><h3 id=\"htmlunit-简介\"><a href=\"#htmlunit-简介\" class=\"headerlink\" title=\"htmlunit 简介\"></a>htmlunit 简介</h3><p>htmlunit是一个模拟浏览器的工具。一般的爬虫可以通过httpClient 的get post方法实现，但是有些网站针对爬虫和攻击作了一些限制，他们会通过JS代码生成一些验证参数，如果不想花心思研究这些js代码，最方便的就是模拟浏览器直接点击渲染后的html元素,此外htmlunit也会帮你自动保存cookie。<br>    <b><a href=\"http://htmlunit.sourceforge.net/\" target=\"_blank\" rel=\"external\">htmlunit官网</a></b><br>    <b><a href=\"https://sourceforge.net/projects/htmlunit/files/latest/download\" target=\"_blank\" rel=\"external\">htmlunit下载</a></b><br>其实不下载jar也可以，htmlunit，maven找得到。<br>api文档？不需要这样的东西，intellij + maven，直接就能把文档和源码都弄下来。<br>htmlunit的核心是一个叫WebClient的东西，基本上我们可以这么理解：一个WebClient实例就是一个浏览器。这意味着如果我们在某个网站拥有多个账号，就可以通过不同的浏览器登录不同的账号，然后一个并发爬取大量信息。</p>\n<p>使用WebClient之前，可以通过WebClient.getOption()方法获取浏览器配置，并对配置进行变更，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 设置请求超时时间</div><div class=\"line\">webClient.getOptions().setTimeout(60000);</div><div class=\"line\">// 是否允许加载css</div><div class=\"line\">webClient.getOptions().setCssEnabled(false);</div><div class=\"line\">// response不是200的时候是否抛出异常</div><div class=\"line\">webClient.getOptions().setThrowExceptionOnFailingStatusCode(false);</div><div class=\"line\">// 是否允许applet应用（比如各种浏览器插件）运行</div><div class=\"line\">webClient.getOptions().setAppletEnabled(false);</div><div class=\"line\">// 是否使用格林尼治时间</div><div class=\"line\">webClient.getOptions().setGeolocationEnabled(false);</div><div class=\"line\">// 是否允许弹出alert框框</div><div class=\"line\">webClient.getOptions().setPopupBlockerEnabled(false);</div><div class=\"line\">// 是否使用不安全的ssl连接（想不装证书访问使用https协议的网站需要把这个设为true）</div><div class=\"line\">webClient.getOptions().setUseInsecureSSL(true);</div></pre></td></tr></table></figure></p>\n<p>WebClient可以通过两种方式请求页面：<br>①<br>等效于直接从浏览器地址栏输入一个url，会执行可以执行的js，此外返回的page对象会将html里面的dom元素转换成java对象，可以通过tag，标签等选择。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">HtmlPage page = webClient.getPage(targetURL);</div></pre></td></tr></table></figure><br>②<br>只请求需要的数据，不加载js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebRequest request;</div><div class=\"line\">WebResponse response = null;</div><div class=\"line\">try &#123;</div><div class=\"line\">  // 这里设定get post</div><div class=\"line\">  request = new WebRequest(new URL(url), HttpMethod.GET);</div><div class=\"line\">  if (additionalHeaders != null) &#123;</div><div class=\"line\">    request.setAdditionalHeaders(additionalHeaders);</div><div class=\"line\">  &#125;</div><div class=\"line\">  response = webClient.loadWebResponse(request);</div><div class=\"line\">&#125; catch (IOException e) &#123;</div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\">return response;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Jsoup\"><a href=\"#Jsoup\" class=\"headerlink\" title=\"Jsoup\"></a>Jsoup</h2><h3 id=\"Jsoup-简介\"><a href=\"#Jsoup-简介\" class=\"headerlink\" title=\"Jsoup 简介\"></a>Jsoup 简介</h3><p>Jsoup可以将纯文本的html转换成java对象，让用户可以进行诸如CSS Select之类的操作，让爬虫更加方便快捷。<br>    <b><a href=\"https://jsoup.org/\" target=\"_blank\" rel=\"external\">Jsoup官网</a></b></p>\n<p>比如像这样通过css选择器选择所有class=”search_feed”的dom元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String searchResult = extractSearchResult(scriptStr);</div><div class=\"line\">Document searchResultDoc = Jsoup.parse(searchResult);</div><div class=\"line\">Elements divSearchFeed = searchResultDoc.select(&quot;.search_feed&quot;);</div></pre></td></tr></table></figure></p>\n<p><b><a href=\"http://www.w3school.com.cn/cssref/css_selectors.asp\" target=\"_blank\" rel=\"external\">css选择器教学</a></b></p>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><p>有些时候，爬回来的数据会是一个js文件，或者是一段CDATA数据，这个时候就需要通过正则表达式提取自己所需的信息。<br><b><a href=\"http://www.runoob.com/regexp/regexp-tutorial.html\" target=\"_blank\" rel=\"external\">正则表达式教学</a></b></p>\n<p>这里有一个很好使的正则测试网站<br><b><a href=\"http://regexr.com/\" target=\"_blank\" rel=\"external\">regex测试</a></b><br>网站左边还有很多很神奇很实用的功能，各位可以自行挖掘<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/regexr.png\" alt=\"regexr.png\" title=\"\"></p>\n<h2 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h2><p>爬虫之前，我们还要分析网站，确认是要向哪个url发什么请求<br>一个及格的开发者电脑里都应该备一个 <b><a href=\"https://www.google.com.tw/intl/zh-CN/chrome/browser/desktop/index.html\" target=\"_blank\" rel=\"external\">chrome</a></b></p>\n<p>我们先拿 <b><a href=\"http://s.weibo.com/weibo/\" target=\"_blank\" rel=\"external\">新浪微博</a></b> 开个刀：<br>打开浏览器，二话不说先按一下F12，点到network，把preserve log勾上<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/view.png\" alt=\"view.png\" title=\"\"><br>然后在搜索框随便输点什么东西，把页签切到doc里，从上往下挨个看，就找到搜索的http请求了<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/find-request.png\" alt=\"find-request.png\" title=\"\"><br>让我们看看参数长啥样的……握日？？没有参数？嗯？url最后那段看着有点像是被urlencode过啊？<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/no_param.png\" alt=\"no_param.png\" title=\"\"></p>\n<blockquote>\n<p>urlencode<br>網路上的定義<br>百分號編碼, 也稱作URL編碼, 是特定上下文的統一資源定位符 的編碼機制. 實際上也適用於統一資源標誌符的編碼。也用於為”application/x-www-form-urlencoded” MIME準備數據, 因為它用於通過HTTP的請求操作提交HTML表單數據。</p>\n</blockquote>\n<p>urldecode一下，确认搜索参数是直接写到请求url中<br><br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/urldeocde2.png\" alt=\"urldeocde2.png\" title=\"\"><br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/urldeocde3.png\" alt=\"urldeocde3.png\" title=\"\"></p>\n<p>开始分析页面<br>点一下审查元素左上角这里<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/select-dom.png\" alt=\"select-dom.png\" title=\"\"><br>点一下页面里的某一条微博<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/select-dom2.png\" alt=\"select-dom2.png\" title=\"\"><br>element页签里就会传送到这个元素，可以分析元素结构，到时候就可以通过jsoup的css选择器从dom元素中提取自己想要的信息了<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/select-dom3.png\" alt=\"select-dom3.png\" title=\"\"></p>\n<p>但是，先别急，现在的你看到的页面，未必是你想象的这样子的<br>在微博搜索页面按一下ctrl+u，发现，页面里的html代码是放在javascript里的，而且unicode编码过，htmlunit还解析不出来<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/view-source.png\" alt=\"view-source.png\" title=\"\"></p>\n<p>  于是，怎么破呢，用文字很难说清，我们用<s>身体</s>实例来体会吧</p>\n<p><b><a href=\"https://github.com/isaacbao/java_crawling_demo\" target=\"_blank\" rel=\"external\">爬虫demo</a></b><br>这个项目里src\\main\\java\\crawlWeibo  这个文件会教你如何处理这个难题</p>\n<p>另外爬虫嘛，很多时候需要登录，但是登录又有验证码，于是……</p>\n<h1 id=\"外传-验证码识别\"><a href=\"#外传-验证码识别\" class=\"headerlink\" title=\"外传 验证码识别\"></a>外传 验证码识别</h1><h2 id=\"A-tesseract-ocr\"><a href=\"#A-tesseract-ocr\" class=\"headerlink\" title=\"A tesseract ocr\"></a>A tesseract ocr</h2><h3 id=\"A-1-tesseract-ocr简介\"><a href=\"#A-1-tesseract-ocr简介\" class=\"headerlink\" title=\"A-1 tesseract ocr简介\"></a>A-1 tesseract ocr简介</h3><p>  一句话概括，tesseract ocr（下文简称为tess）是惠普研发的一个文字图像识别组件，原本是用来给识别扫描仪扫出来的图片，后来进化得越来越妖，连一些简单的扭曲验证码图片也能识别成文字了。<br>比较正规的介绍请看这里↓<br><b><a href=\"https://github.com/tesseract-ocr/tesseract\" target=\"_blank\" rel=\"external\">tess官网</a></b></p>\n<h3 id=\"A-2-安装tess\"><a href=\"#A-2-安装tess\" class=\"headerlink\" title=\"A-2 安装tess\"></a>A-2 安装tess</h3><h4 id=\"A-2-1-安装visual-C-2013\"><a href=\"#A-2-1-安装visual-C-2013\" class=\"headerlink\" title=\"A-2-1 安装visual C++ 2013\"></a>A-2-1 安装visual C++ 2013</h4><p>  windows版的tess需要依赖visual C++ 2013<br>  <b><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=40784\" target=\"_blank\" rel=\"external\">visual C++ 2013下载</a></b><br>下载完毕后双击安装</p>\n<h3 id=\"A-2-2-安装tesseract-ocr\"><a href=\"#A-2-2-安装tesseract-ocr\" class=\"headerlink\" title=\"A-2-2 安装tesseract ocr\"></a>A-2-2 安装tesseract ocr</h3><p>  如无意外该步骤全程都需要翻墙</p>\n<h6 id=\"下载tess\"><a href=\"#下载tess\" class=\"headerlink\" title=\"下载tess\"></a><a href=\"https://sourceforge.net/projects/tesseract-ocr-alt/files/tesseract-ocr-setup-3.02.02.exe/download\" target=\"_blank\" rel=\"external\">下载tess</a></h6><p>  双击安装，一些步骤需要注意下</p>\n<h2 id=\"B-tess4j\"><a href=\"#B-tess4j\" class=\"headerlink\" title=\"B tess4j\"></a>B tess4j</h2><p>  让java可以通过JNA调用tess接口，进行图像识别的工具。（不懂JNA是啥的可以问google，实在不行问百度。认不认识JNA对于阅读本文没有影响）</p>\n<h6 id=\"tess4j官网\"><a href=\"#tess4j官网\" class=\"headerlink\" title=\"tess4j官网\"></a><a href=\"http://tess4j.sourceforge.net/\" target=\"_blank\" rel=\"external\">tess4j官网</a></h6><h3 id=\"B-1-编译tess4j\"><a href=\"#B-1-编译tess4j\" class=\"headerlink\" title=\"B-1 编译tess4j\"></a>B-1 编译tess4j</h3><p>  网上并不容易找到预编译好又能用的tess4j，自己动手丰衣足食。（当然用maven也是可以的，但由于tess4j比较依赖本地环境，即使用maven弄下来了也可能会因为环境问题导致各种运行时错误。）</p>\n<h4 id=\"B-1-1-安装ant\"><a href=\"#B-1-1-安装ant\" class=\"headerlink\" title=\"B-1-1 安装ant\"></a>B-1-1 安装ant</h4><h5 id=\"B-1-1-1-下载ant\"><a href=\"#B-1-1-1-下载ant\" class=\"headerlink\" title=\"B-1-1-1 下载ant\"></a>B-1-1-1 下载ant</h5><p>  tess4j可以通过apache ant来进行编译<br>    <b><a href=\"http://ant.apache.org/\" target=\"_blank\" rel=\"external\">ant官网</a></b><br>    <b><a href=\"http://apache.claz.org//ant/binaries/apache-ant-1.9.7-bin.zip\" target=\"_blank\" rel=\"external\">ant下载</a></b></p>\n<h5 id=\"B-1-1-2-设置环境变量\"><a href=\"#B-1-1-2-设置环境变量\" class=\"headerlink\" title=\"B-1-1-2 设置环境变量\"></a>B-1-1-2 设置环境变量</h5><pre><code>&lt;b&gt;\n  下载完毕后，假设我们把ant解压到了F盘的这个目录 ↓ \n  &lt;br/&gt;\n  F:\\soft\\apache-ant-1.9.7-bin\\\n&lt;/b&gt;\n&lt;b&gt;\n  bin文件夹在这里↓ \n  &lt;br/&gt;\n  F:\\soft\\apache-ant-1.9.7-bin\\apache-ant-1.9.7\\bin\\\n&lt;/b&gt;\n</code></pre><p>win+r(win就是左下角ctrl隔壁的小旗子)<br>运行<br>sysdm.cpl<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/open_system_varaible.png\" alt=\"open_system_varaible.png\" title=\"\"><br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/system_properties.png\" alt=\"system_properties.png\" title=\"\"><br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/select-path.png\" alt=\"select-path.png\" title=\"\"></p>\n<p>  在最后面添加一条（和其他path之间用英文的;隔开，但是末尾不要加;）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">F:\\soft\\apache-ant-1.9.7-bin\\apache-ant-1.9.7\\bin</div></pre></td></tr></table></figure><br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/edit_system_varaiable1.png\" alt=\"edit_system_varaiable1.png\" title=\"\"><br>  （安利一下WIN10，环境变量的配置十分人性化，长这样的，羡慕吧，还不赶紧升级一起喊微软爸爸）<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/edit_system_varaiable.png\" alt=\"edit_system_varaiable.png\" title=\"\"></p>\n<p>  最后确认一下环境变量到底加上没<br>win+r<br>cmd<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/run_cmd.png\" alt=\"run_cmd.png\" title=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ant</div></pre></td></tr></table></figure>\n<p>  结果如图所示，就证明ant可以用了<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/test_ant.png\" alt=\"test_ant.png\" title=\"\"><br>附录：<br>    <b><a href=\"https://support.microsoft.com/en-us/kb/149648\" target=\"_blank\" rel=\"external\">各种控制面板的快捷方式</a></b><br>  知道了这些，如果被人叫去修电脑，装逼效果奇佳（死屌丝码农就一修电脑的也学别人装逼，怎么装都是那副亏样，交大门口捡汽水瓶子的都比你强）</p>\n<h4 id=\"B-1-2-编译tess4j\"><a href=\"#B-1-2-编译tess4j\" class=\"headerlink\" title=\"B-1-2 编译tess4j\"></a>B-1-2 编译tess4j</h4><h5 id=\"B-1-2-1-下载tess4j\"><a href=\"#B-1-2-1-下载tess4j\" class=\"headerlink\" title=\"B-1-2-1 下载tess4j\"></a>B-1-2-1 下载tess4j</h5><p>由于tess的window傻瓜安装包只有tess3.02版本，更上面的tess3.03 3.04都需要自己编译，所以这里tess4j的源码我们也选择适应tess3.02的tess4j-2.0，想体验更高版本的新特性的高端用户可以自行编译安装tess<br>    <b><a href=\"https://sourceforge.net/projects/tess4j/files/tess4j/2.0/Tess4J-2.0-src.zip/download\" target=\"_blank\" rel=\"external\">tess4J 2.0源码</a></b><br>下载后，假设tess4J的源码放在了F盘这个目录<br>    <b>F:/tess4j</b><br>Win+r<br>cmd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ant</div></pre></td></tr></table></figure><br>如果出了问题，请检查自己A-2步骤有没有做对，可以重新执行一下A-2<br>编译完毕后，就可以试用了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化tess实例</div><div class=\"line\">public Tesseract initialTesseractInstance() &#123;</div><div class=\"line\">  Tesseract instance = new Tesseract();</div><div class=\"line\">  URL url = this.getClass().getClassLoader().getResource(&quot;/&quot;);</div><div class=\"line\">  String dir;</div><div class=\"line\">  if (null == url) &#123;</div><div class=\"line\">    url = this.getClass().getClassLoader().getResource(&quot;.&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  dir = url.getPath();</div><div class=\"line\">  // String system_name = System.getProperty(&quot;os.name&quot;);</div><div class=\"line\">  if (System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;windows&quot;)) &#123;</div><div class=\"line\">    dir = dir.substring(1);</div><div class=\"line\">  &#125;</div><div class=\"line\">  instance.setDatapath(dir + &quot;tessdata&quot;);</div><div class=\"line\">  return instance;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><b><a href=\"https://github.com/isaacbao/captcha-identify-demo\" target=\"_blank\" rel=\"external\">验证码识别DEMO</a></b></p>\n<p>总结：其实这篇外传并没有什么卵用，因为最核心的图像处理算法以及图像识别算法都没写，因为这两种都不是区区博客可以写明白的东西，有兴趣，可以自行找论文</p>\n","excerpt":"","more":"<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><p>要学习爬虫，至少需要对http协议和html代码有基本的了解。<br><b><a href=\"https://hit-alibaba.github.io/interview/basic/network/HTTP.html\">http协议</a></b><br><b><a href=\"http://www.w3school.com.cn/html/index.asp\">html语言</a></b></p>\n<h2 id=\"htmlunit\"><a href=\"#htmlunit\" class=\"headerlink\" title=\"htmlunit\"></a>htmlunit</h2><h3 id=\"htmlunit-简介\"><a href=\"#htmlunit-简介\" class=\"headerlink\" title=\"htmlunit 简介\"></a>htmlunit 简介</h3><p>htmlunit是一个模拟浏览器的工具。一般的爬虫可以通过httpClient 的get post方法实现，但是有些网站针对爬虫和攻击作了一些限制，他们会通过JS代码生成一些验证参数，如果不想花心思研究这些js代码，最方便的就是模拟浏览器直接点击渲染后的html元素,此外htmlunit也会帮你自动保存cookie。<br>    <b><a href=\"http://htmlunit.sourceforge.net/\">htmlunit官网</a></b><br>    <b><a href=\"https://sourceforge.net/projects/htmlunit/files/latest/download\">htmlunit下载</a></b><br>其实不下载jar也可以，htmlunit，maven找得到。<br>api文档？不需要这样的东西，intellij + maven，直接就能把文档和源码都弄下来。<br>htmlunit的核心是一个叫WebClient的东西，基本上我们可以这么理解：一个WebClient实例就是一个浏览器。这意味着如果我们在某个网站拥有多个账号，就可以通过不同的浏览器登录不同的账号，然后一个并发爬取大量信息。</p>\n<p>使用WebClient之前，可以通过WebClient.getOption()方法获取浏览器配置，并对配置进行变更，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 设置请求超时时间</div><div class=\"line\">webClient.getOptions().setTimeout(60000);</div><div class=\"line\">// 是否允许加载css</div><div class=\"line\">webClient.getOptions().setCssEnabled(false);</div><div class=\"line\">// response不是200的时候是否抛出异常</div><div class=\"line\">webClient.getOptions().setThrowExceptionOnFailingStatusCode(false);</div><div class=\"line\">// 是否允许applet应用（比如各种浏览器插件）运行</div><div class=\"line\">webClient.getOptions().setAppletEnabled(false);</div><div class=\"line\">// 是否使用格林尼治时间</div><div class=\"line\">webClient.getOptions().setGeolocationEnabled(false);</div><div class=\"line\">// 是否允许弹出alert框框</div><div class=\"line\">webClient.getOptions().setPopupBlockerEnabled(false);</div><div class=\"line\">// 是否使用不安全的ssl连接（想不装证书访问使用https协议的网站需要把这个设为true）</div><div class=\"line\">webClient.getOptions().setUseInsecureSSL(true);</div></pre></td></tr></table></figure></p>\n<p>WebClient可以通过两种方式请求页面：<br>①<br>等效于直接从浏览器地址栏输入一个url，会执行可以执行的js，此外返回的page对象会将html里面的dom元素转换成java对象，可以通过tag，标签等选择。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">HtmlPage page = webClient.getPage(targetURL);</div></pre></td></tr></table></figure><br>②<br>只请求需要的数据，不加载js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebRequest request;</div><div class=\"line\">WebResponse response = null;</div><div class=\"line\">try &#123;</div><div class=\"line\">  // 这里设定get post</div><div class=\"line\">  request = new WebRequest(new URL(url), HttpMethod.GET);</div><div class=\"line\">  if (additionalHeaders != null) &#123;</div><div class=\"line\">    request.setAdditionalHeaders(additionalHeaders);</div><div class=\"line\">  &#125;</div><div class=\"line\">  response = webClient.loadWebResponse(request);</div><div class=\"line\">&#125; catch (IOException e) &#123;</div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\">return response;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Jsoup\"><a href=\"#Jsoup\" class=\"headerlink\" title=\"Jsoup\"></a>Jsoup</h2><h3 id=\"Jsoup-简介\"><a href=\"#Jsoup-简介\" class=\"headerlink\" title=\"Jsoup 简介\"></a>Jsoup 简介</h3><p>Jsoup可以将纯文本的html转换成java对象，让用户可以进行诸如CSS Select之类的操作，让爬虫更加方便快捷。<br>    <b><a href=\"https://jsoup.org/\">Jsoup官网</a></b></p>\n<p>比如像这样通过css选择器选择所有class=”search_feed”的dom元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String searchResult = extractSearchResult(scriptStr);</div><div class=\"line\">Document searchResultDoc = Jsoup.parse(searchResult);</div><div class=\"line\">Elements divSearchFeed = searchResultDoc.select(&quot;.search_feed&quot;);</div></pre></td></tr></table></figure></p>\n<p><b><a href=\"http://www.w3school.com.cn/cssref/css_selectors.asp\">css选择器教学</a></b></p>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><p>有些时候，爬回来的数据会是一个js文件，或者是一段CDATA数据，这个时候就需要通过正则表达式提取自己所需的信息。<br><b><a href=\"http://www.runoob.com/regexp/regexp-tutorial.html\">正则表达式教学</a></b></p>\n<p>这里有一个很好使的正则测试网站<br><b><a href=\"http://regexr.com/\">regex测试</a></b><br>网站左边还有很多很神奇很实用的功能，各位可以自行挖掘<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/regexr.png\" alt=\"regexr.png\" title=\"\"></p>\n<h2 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h2><p>爬虫之前，我们还要分析网站，确认是要向哪个url发什么请求<br>一个及格的开发者电脑里都应该备一个 <b><a href=\"https://www.google.com.tw/intl/zh-CN/chrome/browser/desktop/index.html\">chrome</a></b></p>\n<p>我们先拿 <b><a href=\"http://s.weibo.com/weibo/\">新浪微博</a></b> 开个刀：<br>打开浏览器，二话不说先按一下F12，点到network，把preserve log勾上<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/view.png\" alt=\"view.png\" title=\"\"><br>然后在搜索框随便输点什么东西，把页签切到doc里，从上往下挨个看，就找到搜索的http请求了<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/find-request.png\" alt=\"find-request.png\" title=\"\"><br>让我们看看参数长啥样的……握日？？没有参数？嗯？url最后那段看着有点像是被urlencode过啊？<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/no_param.png\" alt=\"no_param.png\" title=\"\"></p>\n<blockquote>\n<p>urlencode<br>網路上的定義<br>百分號編碼, 也稱作URL編碼, 是特定上下文的統一資源定位符 的編碼機制. 實際上也適用於統一資源標誌符的編碼。也用於為”application/x-www-form-urlencoded” MIME準備數據, 因為它用於通過HTTP的請求操作提交HTML表單數據。</p>\n</blockquote>\n<p>urldecode一下，确认搜索参数是直接写到请求url中<br><br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/urldeocde2.png\" alt=\"urldeocde2.png\" title=\"\"><br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/urldeocde3.png\" alt=\"urldeocde3.png\" title=\"\"></p>\n<p>开始分析页面<br>点一下审查元素左上角这里<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/select-dom.png\" alt=\"select-dom.png\" title=\"\"><br>点一下页面里的某一条微博<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/select-dom2.png\" alt=\"select-dom2.png\" title=\"\"><br>element页签里就会传送到这个元素，可以分析元素结构，到时候就可以通过jsoup的css选择器从dom元素中提取自己想要的信息了<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/select-dom3.png\" alt=\"select-dom3.png\" title=\"\"></p>\n<p>但是，先别急，现在的你看到的页面，未必是你想象的这样子的<br>在微博搜索页面按一下ctrl+u，发现，页面里的html代码是放在javascript里的，而且unicode编码过，htmlunit还解析不出来<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/view-source.png\" alt=\"view-source.png\" title=\"\"></p>\n<p>  于是，怎么破呢，用文字很难说清，我们用<s>身体</s>实例来体会吧</p>\n<p><b><a href=\"https://github.com/isaacbao/java_crawling_demo\">爬虫demo</a></b><br>这个项目里src\\main\\java\\crawlWeibo  这个文件会教你如何处理这个难题</p>\n<p>另外爬虫嘛，很多时候需要登录，但是登录又有验证码，于是……</p>\n<h1 id=\"外传-验证码识别\"><a href=\"#外传-验证码识别\" class=\"headerlink\" title=\"外传 验证码识别\"></a>外传 验证码识别</h1><h2 id=\"A-tesseract-ocr\"><a href=\"#A-tesseract-ocr\" class=\"headerlink\" title=\"A tesseract ocr\"></a>A tesseract ocr</h2><h3 id=\"A-1-tesseract-ocr简介\"><a href=\"#A-1-tesseract-ocr简介\" class=\"headerlink\" title=\"A-1 tesseract ocr简介\"></a>A-1 tesseract ocr简介</h3><p>  一句话概括，tesseract ocr（下文简称为tess）是惠普研发的一个文字图像识别组件，原本是用来给识别扫描仪扫出来的图片，后来进化得越来越妖，连一些简单的扭曲验证码图片也能识别成文字了。<br>比较正规的介绍请看这里↓<br><b><a href=\"https://github.com/tesseract-ocr/tesseract\">tess官网</a></b></p>\n<h3 id=\"A-2-安装tess\"><a href=\"#A-2-安装tess\" class=\"headerlink\" title=\"A-2 安装tess\"></a>A-2 安装tess</h3><h4 id=\"A-2-1-安装visual-C-2013\"><a href=\"#A-2-1-安装visual-C-2013\" class=\"headerlink\" title=\"A-2-1 安装visual C++ 2013\"></a>A-2-1 安装visual C++ 2013</h4><p>  windows版的tess需要依赖visual C++ 2013<br>  <b><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=40784\">visual C++ 2013下载</a></b><br>下载完毕后双击安装</p>\n<h3 id=\"A-2-2-安装tesseract-ocr\"><a href=\"#A-2-2-安装tesseract-ocr\" class=\"headerlink\" title=\"A-2-2 安装tesseract ocr\"></a>A-2-2 安装tesseract ocr</h3><p>  如无意外该步骤全程都需要翻墙</p>\n<h6 id=\"下载tess\"><a href=\"#下载tess\" class=\"headerlink\" title=\"下载tess\"></a><a href=\"https://sourceforge.net/projects/tesseract-ocr-alt/files/tesseract-ocr-setup-3.02.02.exe/download\">下载tess</a></h6><p>  双击安装，一些步骤需要注意下</p>\n<h2 id=\"B-tess4j\"><a href=\"#B-tess4j\" class=\"headerlink\" title=\"B tess4j\"></a>B tess4j</h2><p>  让java可以通过JNA调用tess接口，进行图像识别的工具。（不懂JNA是啥的可以问google，实在不行问百度。认不认识JNA对于阅读本文没有影响）</p>\n<h6 id=\"tess4j官网\"><a href=\"#tess4j官网\" class=\"headerlink\" title=\"tess4j官网\"></a><a href=\"http://tess4j.sourceforge.net/\">tess4j官网</a></h6><h3 id=\"B-1-编译tess4j\"><a href=\"#B-1-编译tess4j\" class=\"headerlink\" title=\"B-1 编译tess4j\"></a>B-1 编译tess4j</h3><p>  网上并不容易找到预编译好又能用的tess4j，自己动手丰衣足食。（当然用maven也是可以的，但由于tess4j比较依赖本地环境，即使用maven弄下来了也可能会因为环境问题导致各种运行时错误。）</p>\n<h4 id=\"B-1-1-安装ant\"><a href=\"#B-1-1-安装ant\" class=\"headerlink\" title=\"B-1-1 安装ant\"></a>B-1-1 安装ant</h4><h5 id=\"B-1-1-1-下载ant\"><a href=\"#B-1-1-1-下载ant\" class=\"headerlink\" title=\"B-1-1-1 下载ant\"></a>B-1-1-1 下载ant</h5><p>  tess4j可以通过apache ant来进行编译<br>    <b><a href=\"http://ant.apache.org/\">ant官网</a></b><br>    <b><a href=\"http://apache.claz.org//ant/binaries/apache-ant-1.9.7-bin.zip\">ant下载</a></b></p>\n<h5 id=\"B-1-1-2-设置环境变量\"><a href=\"#B-1-1-2-设置环境变量\" class=\"headerlink\" title=\"B-1-1-2 设置环境变量\"></a>B-1-1-2 设置环境变量</h5><pre><code>&lt;b&gt;\n  下载完毕后，假设我们把ant解压到了F盘的这个目录 ↓ \n  &lt;br/&gt;\n  F:\\soft\\apache-ant-1.9.7-bin\\\n&lt;/b&gt;\n&lt;b&gt;\n  bin文件夹在这里↓ \n  &lt;br/&gt;\n  F:\\soft\\apache-ant-1.9.7-bin\\apache-ant-1.9.7\\bin\\\n&lt;/b&gt;\n</code></pre><p>win+r(win就是左下角ctrl隔壁的小旗子)<br>运行<br>sysdm.cpl<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/open_system_varaible.png\" alt=\"open_system_varaible.png\" title=\"\"><br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/system_properties.png\" alt=\"system_properties.png\" title=\"\"><br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/select-path.png\" alt=\"select-path.png\" title=\"\"></p>\n<p>  在最后面添加一条（和其他path之间用英文的;隔开，但是末尾不要加;）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">F:\\soft\\apache-ant-1.9.7-bin\\apache-ant-1.9.7\\bin</div></pre></td></tr></table></figure><br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/edit_system_varaiable1.png\" alt=\"edit_system_varaiable1.png\" title=\"\"><br>  （安利一下WIN10，环境变量的配置十分人性化，长这样的，羡慕吧，还不赶紧升级一起喊微软爸爸）<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/edit_system_varaiable.png\" alt=\"edit_system_varaiable.png\" title=\"\"></p>\n<p>  最后确认一下环境变量到底加上没<br>win+r<br>cmd<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/run_cmd.png\" alt=\"run_cmd.png\" title=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ant</div></pre></td></tr></table></figure>\n<p>  结果如图所示，就证明ant可以用了<br><img src=\"/blog/public/2016/08/18/java-web-crawling-startup/test_ant.png\" alt=\"test_ant.png\" title=\"\"><br>附录：<br>    <b><a href=\"https://support.microsoft.com/en-us/kb/149648\">各种控制面板的快捷方式</a></b><br>  知道了这些，如果被人叫去修电脑，装逼效果奇佳（死屌丝码农就一修电脑的也学别人装逼，怎么装都是那副亏样，交大门口捡汽水瓶子的都比你强）</p>\n<h4 id=\"B-1-2-编译tess4j\"><a href=\"#B-1-2-编译tess4j\" class=\"headerlink\" title=\"B-1-2 编译tess4j\"></a>B-1-2 编译tess4j</h4><h5 id=\"B-1-2-1-下载tess4j\"><a href=\"#B-1-2-1-下载tess4j\" class=\"headerlink\" title=\"B-1-2-1 下载tess4j\"></a>B-1-2-1 下载tess4j</h5><p>由于tess的window傻瓜安装包只有tess3.02版本，更上面的tess3.03 3.04都需要自己编译，所以这里tess4j的源码我们也选择适应tess3.02的tess4j-2.0，想体验更高版本的新特性的高端用户可以自行编译安装tess<br>    <b><a href=\"https://sourceforge.net/projects/tess4j/files/tess4j/2.0/Tess4J-2.0-src.zip/download\">tess4J 2.0源码</a></b><br>下载后，假设tess4J的源码放在了F盘这个目录<br>    <b>F:/tess4j</b><br>Win+r<br>cmd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ant</div></pre></td></tr></table></figure><br>如果出了问题，请检查自己A-2步骤有没有做对，可以重新执行一下A-2<br>编译完毕后，就可以试用了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化tess实例</div><div class=\"line\">public Tesseract initialTesseractInstance() &#123;</div><div class=\"line\">  Tesseract instance = new Tesseract();</div><div class=\"line\">  URL url = this.getClass().getClassLoader().getResource(&quot;/&quot;);</div><div class=\"line\">  String dir;</div><div class=\"line\">  if (null == url) &#123;</div><div class=\"line\">    url = this.getClass().getClassLoader().getResource(&quot;.&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  dir = url.getPath();</div><div class=\"line\">  // String system_name = System.getProperty(&quot;os.name&quot;);</div><div class=\"line\">  if (System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;windows&quot;)) &#123;</div><div class=\"line\">    dir = dir.substring(1);</div><div class=\"line\">  &#125;</div><div class=\"line\">  instance.setDatapath(dir + &quot;tessdata&quot;);</div><div class=\"line\">  return instance;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><b><a href=\"https://github.com/isaacbao/captcha-identify-demo\">验证码识别DEMO</a></b></p>\n<p>总结：其实这篇外传并没有什么卵用，因为最核心的图像处理算法以及图像识别算法都没写，因为这两种都不是区区博客可以写明白的东西，有兴趣，可以自行找论文</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-06-19T12:14:17.459Z","updated":"2016-08-20T16:39:22.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cismz1zoy000bmw9j7f1uaa8i","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/WNDR-4300-OpenWrt/openNcpa.png","slug":"openNcpa.png","post":"cismz1zjm0000mw9jkmxotl9b","modified":0,"renderable":0},{"_id":"source/_posts/WNDR-4300-OpenWrt/property.png","slug":"property.png","post":"cismz1zjm0000mw9jkmxotl9b","modified":0,"renderable":0},{"_id":"source/_posts/WNDR-4300-OpenWrt/selectEtherNet.png","slug":"selectEtherNet.png","post":"cismz1zjm0000mw9jkmxotl9b","modified":0,"renderable":0},{"_id":"source/_posts/WNDR-4300-OpenWrt/selectIPV4.png","slug":"selectIPV4.png","post":"cismz1zjm0000mw9jkmxotl9b","modified":0,"renderable":0},{"_id":"source/_posts/WNDR-4300-OpenWrt/setIPV4.png","slug":"setIPV4.png","post":"cismz1zjm0000mw9jkmxotl9b","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/bind-credit-card.png","slug":"bind-credit-card.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/bind-credit-card2.png","slug":"bind-credit-card2.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/charge.png","slug":"charge.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/editServer.png","slug":"editServer.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/editServer2.png","slug":"editServer2.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/selectLocation.png","slug":"selectLocation.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/selectLocation2.png","slug":"selectLocation2.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/selectServer.png","slug":"selectServer.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/selectServer2.png","slug":"selectServer2.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/selectServer3.png","slug":"selectServer3.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/selectServer4.png","slug":"selectServer4.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/usePutty.png","slug":"usePutty.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/usePutty2.png","slug":"usePutty2.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/usePutty3.png","slug":"usePutty3.png","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/build-shadowsocks-server/vultr2016-1.jpg","slug":"vultr2016-1.jpg","post":"cismz1zka0001mw9jtv0pszj5","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/edit_system_varaiable.png","slug":"edit_system_varaiable.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/edit_system_varaiable1.png","slug":"edit_system_varaiable1.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/find-request.png","slug":"find-request.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/import-intellij1.png","slug":"import-intellij1.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/import-intellij2.png","slug":"import-intellij2.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/intellij-welcome.png","slug":"intellij-welcome.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/no_param.png","slug":"no_param.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/open_system_varaible.png","slug":"open_system_varaible.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/regexr.png","slug":"regexr.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/run_cmd.png","slug":"run_cmd.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/select-dom.png","slug":"select-dom.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/select-dom2.png","slug":"select-dom2.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/select-dom3.png","slug":"select-dom3.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/select-path.png","slug":"select-path.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/system_properties.png","slug":"system_properties.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/test_ant.png","slug":"test_ant.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/urldecode1.png","slug":"urldecode1.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/urldeocde2.png","slug":"urldeocde2.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/urldeocde3.png","slug":"urldeocde3.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/view-source.png","slug":"view-source.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0},{"_id":"source/_posts/java-web-crawling-startup/view.png","slug":"view.png","post":"cismz1zog000amw9j3bsifnp8","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cismz1zjm0000mw9jkmxotl9b","category_id":"cismz1zkw0003mw9j0r3y25j9","_id":"cismz1zml0007mw9ju6pg8as2"},{"post_id":"cismz1zka0001mw9jtv0pszj5","category_id":"cismz1zkw0003mw9j0r3y25j9","_id":"cismz1zmr0009mw9ja6tt7j2r"},{"post_id":"cismz1zog000amw9j3bsifnp8","category_id":"cismz1zkw0003mw9j0r3y25j9","_id":"cismz1zpc000dmw9jhkc7515u"}],"PostTag":[{"post_id":"cismz1zjm0000mw9jkmxotl9b","tag_id":"cismz1zkk0002mw9jtm5ujr1a","_id":"cismz1zm80006mw9jv5xc7kwy"},{"post_id":"cismz1zka0001mw9jtv0pszj5","tag_id":"cismz1zkk0002mw9jtm5ujr1a","_id":"cismz1zmp0008mw9jokt0aveq"},{"post_id":"cismz1zog000amw9j3bsifnp8","tag_id":"cismz1zp6000cmw9js02h451b","_id":"cismz1zpn000gmw9j0d4djz0f"},{"post_id":"cismz1zog000amw9j3bsifnp8","tag_id":"cismz1zpf000emw9jgz7g1pr4","_id":"cismz1zpn000hmw9jo35pzk5r"},{"post_id":"cismz1zog000amw9j3bsifnp8","tag_id":"cismz1zpi000fmw9j1i6jk08x","_id":"cismz1zpq000imw9jjh7tlx0y"}],"Tag":[{"name":"科学上网","_id":"cismz1zkk0002mw9jtm5ujr1a"},{"name":"java","_id":"cismz1zp6000cmw9js02h451b"},{"name":"爬虫","_id":"cismz1zpf000emw9jgz7g1pr4"},{"name":"文字图像识别","_id":"cismz1zpi000fmw9j1i6jk08x"}]}}